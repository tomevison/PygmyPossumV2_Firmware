
PIR_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e58  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a06c  0800a06c  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800a06c  0800a06c  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a06c  0800a06c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a06c  0800a06c  0001a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a070  0800a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800a074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000190  0800a204  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014a4  0800a204  000214a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c67d  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c68  00000000  00000000  0003c83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  000404a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c6  00000000  00000000  00043560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db17  00000000  00000000  00062c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bea5a  00000000  00000000  0008073d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b10  00000000  00000000  0013f1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009fcc 	.word	0x08009fcc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	08009fcc 	.word	0x08009fcc

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fb61 	bl	8000896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f80b 	bl	80001ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f95e 	bl	8000498 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001dc:	f000 f84c 	bl	8000278 <MX_ADC1_Init>
  MX_I2C1_Init();
 80001e0:	f000 f8c0 	bl	8000364 <MX_I2C1_Init>
  MX_TIM2_Init();
 80001e4:	f000 f8fe 	bl	80003e4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001e8:	f009 f916 	bl	8009418 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	e7fe      	b.n	80001ec <main+0x20>

080001ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b096      	sub	sp, #88	; 0x58
 80001f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2244      	movs	r2, #68	; 0x44
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f009 fedd 	bl	8009fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000202:	463b      	mov	r3, r7
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000210:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000214:	f003 fcc6 	bl	8003ba4 <HAL_PWREx_ControlVoltageScaling>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800021e:	f000 f9b9 	bl	8000594 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000222:	2321      	movs	r3, #33	; 0x21
 8000224:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000226:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800022a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000230:	2300      	movs	r3, #0
 8000232:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	4618      	mov	r0, r3
 800023a:	f003 fd19 	bl	8003c70 <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000244:	f000 f9a6 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800024c:	2302      	movs	r3, #2
 800024e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025c:	463b      	mov	r3, r7
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f004 f967 	bl	8004534 <HAL_RCC_ClockConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026c:	f000 f992 	bl	8000594 <Error_Handler>
  }
}
 8000270:	bf00      	nop
 8000272:	3758      	adds	r7, #88	; 0x58
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800027e:	f107 031c 	add.w	r3, r7, #28
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
 8000298:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800029a:	4b2f      	ldr	r3, [pc, #188]	; (8000358 <MX_ADC1_Init+0xe0>)
 800029c:	4a2f      	ldr	r2, [pc, #188]	; (800035c <MX_ADC1_Init+0xe4>)
 800029e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002a0:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002a6:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002b2:	4b29      	ldr	r3, [pc, #164]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002b8:	4b27      	ldr	r3, [pc, #156]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002ba:	2204      	movs	r2, #4
 80002bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002be:	4b26      	ldr	r3, [pc, #152]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002e4:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80002f2:	4b19      	ldr	r3, [pc, #100]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fa:	4817      	ldr	r0, [pc, #92]	; (8000358 <MX_ADC1_Init+0xe0>)
 80002fc:	f000 fce0 	bl	8000cc0 <HAL_ADC_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000306:	f000 f945 	bl	8000594 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800030e:	f107 031c 	add.w	r3, r7, #28
 8000312:	4619      	mov	r1, r3
 8000314:	4810      	ldr	r0, [pc, #64]	; (8000358 <MX_ADC1_Init+0xe0>)
 8000316:	f001 fa45 	bl	80017a4 <HAL_ADCEx_MultiModeConfigChannel>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000320:	f000 f938 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_ADC1_Init+0xe8>)
 8000326:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000328:	2306      	movs	r3, #6
 800032a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000330:	237f      	movs	r3, #127	; 0x7f
 8000332:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000334:	2304      	movs	r3, #4
 8000336:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4619      	mov	r1, r3
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_ADC1_Init+0xe0>)
 8000342:	f000 fe0d 	bl	8000f60 <HAL_ADC_ConfigChannel>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800034c:	f000 f922 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	3728      	adds	r7, #40	; 0x28
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200001ac 	.word	0x200001ac
 800035c:	50040000 	.word	0x50040000
 8000360:	19200040 	.word	0x19200040

08000364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_I2C1_Init+0x74>)
 800036a:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <MX_I2C1_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000370:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <MX_I2C1_Init+0x7c>)
 8000372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_I2C1_Init+0x74>)
 800037c:	2201      	movs	r2, #1
 800037e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800039e:	480e      	ldr	r0, [pc, #56]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003a0:	f001 fd40 	bl	8001e24 <HAL_I2C_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003aa:	f000 f8f3 	bl	8000594 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ae:	2100      	movs	r1, #0
 80003b0:	4809      	ldr	r0, [pc, #36]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003b2:	f001 fdc6 	bl	8001f42 <HAL_I2CEx_ConfigAnalogFilter>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003bc:	f000 f8ea 	bl	8000594 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003c0:	2100      	movs	r1, #0
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003c4:	f001 fe08 	bl	8001fd8 <HAL_I2CEx_ConfigDigitalFilter>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ce:	f000 f8e1 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000210 	.word	0x20000210
 80003dc:	40005400 	.word	0x40005400
 80003e0:	00303d5b 	.word	0x00303d5b

080003e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08a      	sub	sp, #40	; 0x28
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	463b      	mov	r3, r7
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
 8000404:	615a      	str	r2, [r3, #20]
 8000406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000408:	4b22      	ldr	r3, [pc, #136]	; (8000494 <MX_TIM2_Init+0xb0>)
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000410:	4b20      	ldr	r3, [pc, #128]	; (8000494 <MX_TIM2_Init+0xb0>)
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000416:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <MX_TIM2_Init+0xb0>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800041c:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <MX_TIM2_Init+0xb0>)
 800041e:	f04f 32ff 	mov.w	r2, #4294967295
 8000422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_TIM2_Init+0xb0>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_TIM2_Init+0xb0>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000430:	4818      	ldr	r0, [pc, #96]	; (8000494 <MX_TIM2_Init+0xb0>)
 8000432:	f004 fbef 	bl	8004c14 <HAL_TIM_PWM_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800043c:	f000 f8aa 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	4619      	mov	r1, r3
 800044e:	4811      	ldr	r0, [pc, #68]	; (8000494 <MX_TIM2_Init+0xb0>)
 8000450:	f005 f82e 	bl	80054b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800045a:	f000 f89b 	bl	8000594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800045e:	2360      	movs	r3, #96	; 0x60
 8000460:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800046e:	463b      	mov	r3, r7
 8000470:	220c      	movs	r2, #12
 8000472:	4619      	mov	r1, r3
 8000474:	4807      	ldr	r0, [pc, #28]	; (8000494 <MX_TIM2_Init+0xb0>)
 8000476:	f004 fc25 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000480:	f000 f888 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <MX_TIM2_Init+0xb0>)
 8000486:	f000 f963 	bl	8000750 <HAL_TIM_MspPostInit>

}
 800048a:	bf00      	nop
 800048c:	3728      	adds	r7, #40	; 0x28
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000264 	.word	0x20000264

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b36      	ldr	r3, [pc, #216]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a35      	ldr	r2, [pc, #212]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b33      	ldr	r3, [pc, #204]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b30      	ldr	r3, [pc, #192]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d2:	4b2d      	ldr	r3, [pc, #180]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a29      	ldr	r2, [pc, #164]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004e4:	f043 0302 	orr.w	r3, r3, #2
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b27      	ldr	r3, [pc, #156]	; (8000588 <MX_GPIO_Init+0xf0>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOUT_CAM_S_Pin|DOUT_CAM_F_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80004fc:	4823      	ldr	r0, [pc, #140]	; (800058c <MX_GPIO_Init+0xf4>)
 80004fe:	f001 fc79 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_BAT_ENA_Pin|LED2_Pin|I2C1_E0_Pin|I2C1_E1_Pin
 8000502:	2200      	movs	r2, #0
 8000504:	21f4      	movs	r1, #244	; 0xf4
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f001 fc73 	bl	8001df4 <HAL_GPIO_WritePin>
                          |I2C1_E2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DOUT_CAM_S_Pin DOUT_CAM_F_Pin */
  GPIO_InitStruct.Pin = DOUT_CAM_S_Pin|DOUT_CAM_F_Pin;
 800050e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4819      	ldr	r0, [pc, #100]	; (800058c <MX_GPIO_Init+0xf4>)
 8000528:	f001 faf2 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_BAT_ENA_Pin LED2_Pin I2C1_E0_Pin I2C1_E1_Pin
                           I2C1_E2_Pin */
  GPIO_InitStruct.Pin = DO_BAT_ENA_Pin|LED2_Pin|I2C1_E0_Pin|I2C1_E1_Pin
 800052c:	23f4      	movs	r3, #244	; 0xf4
 800052e:	60fb      	str	r3, [r7, #12]
                          |I2C1_E2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f001 fae3 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIR_TRIG_Pin DIP4_Pin DIP3_Pin DIP2_Pin
                           DIP1_Pin */
  GPIO_InitStruct.Pin = PIR_TRIG_Pin|DIP4_Pin|DIP3_Pin|DIP2_Pin
 800054a:	23f1      	movs	r3, #241	; 0xf1
 800054c:	60fb      	str	r3, [r7, #12]
                          |DIP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <MX_GPIO_Init+0xf8>)
 800055e:	f001 fad7 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_WP_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = I2C1_WP_Pin|BTN1_Pin;
 8000562:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4619      	mov	r1, r3
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f001 fac9 	bl	8001b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057e:	bf00      	nop
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	48000800 	.word	0x48000800
 8000590:	48000400 	.word	0x48000400

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x44>)
 80005a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_MspInit+0x44>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6613      	str	r3, [r2, #96]	; 0x60
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x44>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_MspInit+0x44>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_MspInit+0x44>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_MspInit+0x44>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a15      	ldr	r2, [pc, #84]	; (800065c <HAL_ADC_MspInit+0x74>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d124      	bne.n	8000654 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_ADC_MspInit+0x78>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <HAL_ADC_MspInit+0x78>)
 8000610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_ADC_MspInit+0x78>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_ADC_MspInit+0x78>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <HAL_ADC_MspInit+0x78>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_ADC_MspInit+0x78>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ANIN_BAT__Pin;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800063e:	230b      	movs	r3, #11
 8000640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ANIN_BAT__GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fa5e 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	; 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	50040000 	.word	0x50040000
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	; 0x58
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2234      	movs	r2, #52	; 0x34
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f009 fc99 	bl	8009fbc <memset>
  if(hi2c->Instance==I2C1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a1f      	ldr	r2, [pc, #124]	; (800070c <HAL_I2C_MspInit+0xa8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d137      	bne.n	8000704 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000694:	2340      	movs	r3, #64	; 0x40
 8000696:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 f931 	bl	8004908 <HAL_RCCEx_PeriphCLKConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006ac:	f7ff ff72 	bl	8000594 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_I2C_MspInit+0xac>)
 80006b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <HAL_I2C_MspInit+0xac>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <HAL_I2C_MspInit+0xac>)
 80006be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ce:	2312      	movs	r3, #18
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006da:	2304      	movs	r3, #4
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f001 fa12 	bl	8001b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_I2C_MspInit+0xac>)
 80006ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_I2C_MspInit+0xac>)
 80006f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f6:	6593      	str	r3, [r2, #88]	; 0x58
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_I2C_MspInit+0xac>)
 80006fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000704:	bf00      	nop
 8000706:	3758      	adds	r7, #88	; 0x58
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40005400 	.word	0x40005400
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000724:	d10b      	bne.n	800073e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_TIM_PWM_MspInit+0x38>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_TIM_PWM_MspInit+0x38>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_TIM_PWM_MspInit+0x38>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000770:	d11c      	bne.n	80007ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_TIM_MspPostInit+0x64>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_TIM_MspPostInit+0x64>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_TIM_MspPostInit+0x64>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED1_Pin;
 800078a:	2308      	movs	r3, #8
 800078c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f001 f9b2 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f89c 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <USB_IRQHandler+0x10>)
 8000812:	f001 fd66 	bl	80022e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000f88 	.word	0x20000f88

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800087c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000848:	f7ff ffea 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f009 fb7f 	bl	8009f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000876:	f7ff fca9 	bl	80001cc <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800087c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000888:	0800a074 	.word	0x0800a074
  ldr r2, =_sbss
 800088c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000890:	200014a4 	.word	0x200014a4

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>

08000896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f001 f8f3 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f80e 	bl	80008c8 <HAL_InitTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	e001      	b.n	80008bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b8:	f7ff fe72 	bl	80005a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_InitTick+0x6c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d023      	beq.n	8000924 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_InitTick+0x70>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_InitTick+0x6c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f8ff 	bl	8001af6 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10f      	bne.n	800091e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d809      	bhi.n	8000918 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f001 f8c9 	bl	8001aa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_InitTick+0x74>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e007      	b.n	8000928 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e004      	b.n	8000928 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e001      	b.n	8000928 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	20000000 	.word	0x20000000
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	200002b0 	.word	0x200002b0

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200002b0 	.word	0x200002b0

08000980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	609a      	str	r2, [r3, #8]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3360      	adds	r3, #96	; 0x60
 80009fa:	461a      	mov	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <LL_ADC_SetOffset+0x44>)
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	4313      	orrs	r3, r2
 8000a18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a20:	bf00      	nop
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	03fff000 	.word	0x03fff000

08000a30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3360      	adds	r3, #96	; 0x60
 8000a3e:	461a      	mov	r2, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3360      	adds	r3, #96	; 0x60
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a86:	bf00      	nop
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	615a      	str	r2, [r3, #20]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3330      	adds	r3, #48	; 0x30
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	4413      	add	r3, r2
 8000ad6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	211f      	movs	r1, #31
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	401a      	ands	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	0e9b      	lsrs	r3, r3, #26
 8000af0:	f003 011f 	and.w	r1, r3, #31
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	f003 031f 	and.w	r3, r3, #31
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	431a      	orrs	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b04:	bf00      	nop
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3314      	adds	r3, #20
 8000b20:	461a      	mov	r2, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	0e5b      	lsrs	r3, r3, #25
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	4413      	add	r3, r2
 8000b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	0d1b      	lsrs	r3, r3, #20
 8000b38:	f003 031f 	and.w	r3, r3, #31
 8000b3c:	2107      	movs	r1, #7
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	401a      	ands	r2, r3
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	0d1b      	lsrs	r3, r3, #20
 8000b4a:	f003 031f 	and.w	r3, r3, #31
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0318 	and.w	r3, r3, #24
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b8c:	40d9      	lsrs	r1, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	400b      	ands	r3, r1
 8000b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b96:	431a      	orrs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	0007ffff 	.word	0x0007ffff

08000bb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6093      	str	r3, [r2, #8]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000be8:	d101      	bne.n	8000bee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000c38:	d101      	bne.n	8000c3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d101      	bne.n	8000c64 <LL_ADC_IsEnabled+0x18>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <LL_ADC_IsEnabled+0x1a>
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d101      	bne.n	8000c8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d101      	bne.n	8000cb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e131      	b.n	8000f3e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d109      	bne.n	8000cfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fc7d 	bl	80005e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff67 	bl	8000bd4 <LL_ADC_IsDeepPowerDownEnabled>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff4d 	bl	8000bb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff82 	bl	8000c24 <LL_ADC_IsInternalRegulatorEnabled>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d115      	bne.n	8000d52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff66 	bl	8000bfc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d30:	4b85      	ldr	r3, [pc, #532]	; (8000f48 <HAL_ADC_Init+0x288>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	099b      	lsrs	r3, r3, #6
 8000d36:	4a85      	ldr	r2, [pc, #532]	; (8000f4c <HAL_ADC_Init+0x28c>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	099b      	lsrs	r3, r3, #6
 8000d3e:	3301      	adds	r3, #1
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d44:	e002      	b.n	8000d4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f9      	bne.n	8000d46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff64 	bl	8000c24 <LL_ADC_IsInternalRegulatorEnabled>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d66:	f043 0210 	orr.w	r2, r3, #16
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f043 0201 	orr.w	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff75 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 8000d88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 80ca 	bne.w	8000f2c <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80c6 	bne.w	8000f2c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000da8:	f043 0202 	orr.w	r2, r3, #2
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff49 	bl	8000c4c <LL_ADC_IsEnabled>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d110      	bne.n	8000de2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000dc0:	4863      	ldr	r0, [pc, #396]	; (8000f50 <HAL_ADC_Init+0x290>)
 8000dc2:	f7ff ff43 	bl	8000c4c <LL_ADC_IsEnabled>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4862      	ldr	r0, [pc, #392]	; (8000f54 <HAL_ADC_Init+0x294>)
 8000dca:	f7ff ff3f 	bl	8000c4c <LL_ADC_IsEnabled>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d105      	bne.n	8000de2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	485e      	ldr	r0, [pc, #376]	; (8000f58 <HAL_ADC_Init+0x298>)
 8000dde:	f7ff fdcf 	bl	8000980 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7e5b      	ldrb	r3, [r3, #25]
 8000de6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dec:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000df2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000df8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e00:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d106      	bne.n	8000e1e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	3b01      	subs	r3, #1
 8000e16:	045b      	lsls	r3, r3, #17
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d009      	beq.n	8000e3a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <HAL_ADC_Init+0x29c>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff0d 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 8000e58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff1a 	bl	8000c98 <LL_ADC_INJ_IsConversionOngoing>
 8000e64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d13d      	bne.n	8000ee8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d13a      	bne.n	8000ee8 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e76:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e8e:	f023 0302 	bic.w	r3, r3, #2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d118      	bne.n	8000ed8 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ebc:	4311      	orrs	r1, r2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ec2:	4311      	orrs	r1, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0201 	orr.w	r2, r2, #1
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	e007      	b.n	8000ee8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d10c      	bne.n	8000f0a <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f023 010f 	bic.w	r1, r3, #15
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	1e5a      	subs	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
 8000f08:	e007      	b.n	8000f1a <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 020f 	bic.w	r2, r2, #15
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	655a      	str	r2, [r3, #84]	; 0x54
 8000f2a:	e007      	b.n	8000f3c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f30:	f043 0210 	orr.w	r2, r3, #16
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	053e2d63 	.word	0x053e2d63
 8000f50:	50040000 	.word	0x50040000
 8000f54:	50040100 	.word	0x50040100
 8000f58:	50040300 	.word	0x50040300
 8000f5c:	fff0c007 	.word	0xfff0c007

08000f60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0b6      	sub	sp, #216	; 0xd8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_ConfigChannel+0x22>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e3d5      	b.n	800172e <HAL_ADC_ConfigChannel+0x7ce>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fe6f 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 83ba 	bne.w	8001710 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d824      	bhi.n	8000fee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d81b      	bhi.n	8000fe6 <HAL_ADC_ConfigChannel+0x86>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <HAL_ADC_ConfigChannel+0x54>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fcd 	.word	0x08000fcd
 8000fbc:	08000fd5 	.word	0x08000fd5
 8000fc0:	08000fdd 	.word	0x08000fdd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	605a      	str	r2, [r3, #4]
          break;
 8000fca:	e011      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2212      	movs	r2, #18
 8000fd0:	605a      	str	r2, [r3, #4]
          break;
 8000fd2:	e00d      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2218      	movs	r2, #24
 8000fd8:	605a      	str	r2, [r3, #4]
          break;
 8000fda:	e009      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe2:	605a      	str	r2, [r3, #4]
          break;
 8000fe4:	e004      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2206      	movs	r2, #6
 8000fea:	605a      	str	r2, [r3, #4]
          break;
 8000fec:	e000      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000fee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6859      	ldr	r1, [r3, #4]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f7ff fd5b 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe33 	bl	8000c72 <LL_ADC_REG_IsConversionOngoing>
 800100c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe3f 	bl	8000c98 <LL_ADC_INJ_IsConversionOngoing>
 800101a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800101e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 81c1 	bne.w	80013aa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800102c:	2b00      	cmp	r3, #0
 800102e:	f040 81bc 	bne.w	80013aa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800103a:	d10f      	bne.n	800105c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fd62 	bl	8000b10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fd1c 	bl	8000a92 <LL_ADC_SetSamplingTimeCommonConfig>
 800105a:	e00e      	b.n	800107a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	461a      	mov	r2, r3
 800106a:	f7ff fd51 	bl	8000b10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd0c 	bl	8000a92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	08db      	lsrs	r3, r3, #3
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d00a      	beq.n	80010b2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6919      	ldr	r1, [r3, #16]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010ac:	f7ff fc9c 	bl	80009e8 <LL_ADC_SetOffset>
 80010b0:	e17b      	b.n	80013aa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fcb9 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10a      	bne.n	80010de <HAL_ADC_ConfigChannel+0x17e>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fcae 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	0e9b      	lsrs	r3, r3, #26
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	e01e      	b.n	800111c <HAL_ADC_ConfigChannel+0x1bc>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fca3 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800110c:	2320      	movs	r3, #32
 800110e:	e004      	b.n	800111a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001110:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1d4>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0e9b      	lsrs	r3, r3, #26
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	e018      	b.n	8001166 <HAL_ADC_ConfigChannel+0x206>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800114c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001158:	2320      	movs	r3, #32
 800115a:	e004      	b.n	8001166 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800115c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001166:	429a      	cmp	r2, r3
 8001168:	d106      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fc72 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fc56 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10a      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x244>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fc4b 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	0e9b      	lsrs	r3, r3, #26
 800119e:	f003 021f 	and.w	r2, r3, #31
 80011a2:	e01e      	b.n	80011e2 <HAL_ADC_ConfigChannel+0x282>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fc40 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80011c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80011ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80011d2:	2320      	movs	r3, #32
 80011d4:	e004      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80011d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x29a>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	0e9b      	lsrs	r3, r3, #26
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	e018      	b.n	800122c <HAL_ADC_ConfigChannel+0x2cc>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800120e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800121e:	2320      	movs	r3, #32
 8001220:	e004      	b.n	800122c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001222:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800122c:	429a      	cmp	r2, r3
 800122e:	d106      	bne.n	800123e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fc0f 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2102      	movs	r1, #2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fbf3 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10a      	bne.n	800126a <HAL_ADC_ConfigChannel+0x30a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2102      	movs	r1, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fbe8 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	0e9b      	lsrs	r3, r3, #26
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	e01e      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x348>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2102      	movs	r1, #2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fbdd 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800128c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001298:	2320      	movs	r3, #32
 800129a:	e004      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800129c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x360>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0e9b      	lsrs	r3, r3, #26
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	e016      	b.n	80012ee <HAL_ADC_ConfigChannel+0x38e>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80012d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80012d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80012e0:	2320      	movs	r3, #32
 80012e2:	e004      	b.n	80012ee <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80012e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d106      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	2102      	movs	r1, #2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fbae 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2103      	movs	r1, #3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb92 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10a      	bne.n	800132c <HAL_ADC_ConfigChannel+0x3cc>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2103      	movs	r1, #3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fb87 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	0e9b      	lsrs	r3, r3, #26
 8001326:	f003 021f 	and.w	r2, r3, #31
 800132a:	e017      	b.n	800135c <HAL_ADC_ConfigChannel+0x3fc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2103      	movs	r1, #3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fb7c 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001346:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800134e:	2320      	movs	r3, #32
 8001350:	e003      	b.n	800135a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001364:	2b00      	cmp	r3, #0
 8001366:	d105      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x414>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0e9b      	lsrs	r3, r3, #26
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	e011      	b.n	8001398 <HAL_ADC_ConfigChannel+0x438>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001384:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800138c:	2320      	movs	r3, #32
 800138e:	e003      	b.n	8001398 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001398:	429a      	cmp	r2, r3
 800139a:	d106      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2200      	movs	r2, #0
 80013a2:	2103      	movs	r1, #3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fb59 	bl	8000a5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc4c 	bl	8000c4c <LL_ADC_IsEnabled>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 8140 	bne.w	800163c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6819      	ldr	r1, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	461a      	mov	r2, r3
 80013ca:	f7ff fbcd 	bl	8000b68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a8f      	ldr	r2, [pc, #572]	; (8001610 <HAL_ADC_ConfigChannel+0x6b0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	f040 8131 	bne.w	800163c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10b      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x4a2>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0e9b      	lsrs	r3, r3, #26
 80013f0:	3301      	adds	r3, #1
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	bf94      	ite	ls
 80013fa:	2301      	movls	r3, #1
 80013fc:	2300      	movhi	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	e019      	b.n	8001436 <HAL_ADC_ConfigChannel+0x4d6>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001412:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800141a:	2320      	movs	r3, #32
 800141c:	e003      	b.n	8001426 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800141e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001420:	fab3 f383 	clz	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2b09      	cmp	r3, #9
 800142e:	bf94      	ite	ls
 8001430:	2301      	movls	r3, #1
 8001432:	2300      	movhi	r3, #0
 8001434:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001436:	2b00      	cmp	r3, #0
 8001438:	d079      	beq.n	800152e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x4f6>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0e9b      	lsrs	r3, r3, #26
 800144c:	3301      	adds	r3, #1
 800144e:	069b      	lsls	r3, r3, #26
 8001450:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001454:	e015      	b.n	8001482 <HAL_ADC_ConfigChannel+0x522>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001466:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800146e:	2320      	movs	r3, #32
 8001470:	e003      	b.n	800147a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001474:	fab3 f383 	clz	r3, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3301      	adds	r3, #1
 800147c:	069b      	lsls	r3, r3, #26
 800147e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x542>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0e9b      	lsrs	r3, r3, #26
 8001494:	3301      	adds	r3, #1
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	e017      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x572>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80014b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80014b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80014ba:	2320      	movs	r3, #32
 80014bc:	e003      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80014be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c0:	fab3 f383 	clz	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2101      	movs	r1, #1
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	ea42 0103 	orr.w	r1, r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10a      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x598>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0e9b      	lsrs	r3, r3, #26
 80014e8:	3301      	adds	r3, #1
 80014ea:	f003 021f 	and.w	r2, r3, #31
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	051b      	lsls	r3, r3, #20
 80014f6:	e018      	b.n	800152a <HAL_ADC_ConfigChannel+0x5ca>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800150a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001510:	2320      	movs	r3, #32
 8001512:	e003      	b.n	800151c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3301      	adds	r3, #1
 800151e:	f003 021f 	and.w	r2, r3, #31
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800152a:	430b      	orrs	r3, r1
 800152c:	e081      	b.n	8001632 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001536:	2b00      	cmp	r3, #0
 8001538:	d107      	bne.n	800154a <HAL_ADC_ConfigChannel+0x5ea>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0e9b      	lsrs	r3, r3, #26
 8001540:	3301      	adds	r3, #1
 8001542:	069b      	lsls	r3, r3, #26
 8001544:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001548:	e015      	b.n	8001576 <HAL_ADC_ConfigChannel+0x616>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001562:	2320      	movs	r3, #32
 8001564:	e003      	b.n	800156e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001568:	fab3 f383 	clz	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	069b      	lsls	r3, r3, #26
 8001572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x636>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0e9b      	lsrs	r3, r3, #26
 8001588:	3301      	adds	r3, #1
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	e017      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x666>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	61fb      	str	r3, [r7, #28]
  return result;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80015ae:	2320      	movs	r3, #32
 80015b0:	e003      	b.n	80015ba <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	ea42 0103 	orr.w	r1, r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10d      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x692>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0e9b      	lsrs	r3, r3, #26
 80015dc:	3301      	adds	r3, #1
 80015de:	f003 021f 	and.w	r2, r3, #31
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	3b1e      	subs	r3, #30
 80015ea:	051b      	lsls	r3, r3, #20
 80015ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f0:	e01e      	b.n	8001630 <HAL_ADC_ConfigChannel+0x6d0>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	613b      	str	r3, [r7, #16]
  return result;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d104      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800160a:	2320      	movs	r3, #32
 800160c:	e006      	b.n	800161c <HAL_ADC_ConfigChannel+0x6bc>
 800160e:	bf00      	nop
 8001610:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	f003 021f 	and.w	r2, r3, #31
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	3b1e      	subs	r3, #30
 800162a:	051b      	lsls	r3, r3, #20
 800162c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001630:	430b      	orrs	r3, r1
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	6892      	ldr	r2, [r2, #8]
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fa6a 	bl	8000b10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <HAL_ADC_ConfigChannel+0x7d8>)
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d06c      	beq.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001648:	483c      	ldr	r0, [pc, #240]	; (800173c <HAL_ADC_ConfigChannel+0x7dc>)
 800164a:	f7ff f9bf 	bl	80009cc <LL_ADC_GetCommonPathInternalCh>
 800164e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <HAL_ADC_ConfigChannel+0x7e0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d127      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800165c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d121      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a35      	ldr	r2, [pc, #212]	; (8001744 <HAL_ADC_ConfigChannel+0x7e4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d157      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001676:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800167a:	4619      	mov	r1, r3
 800167c:	482f      	ldr	r0, [pc, #188]	; (800173c <HAL_ADC_ConfigChannel+0x7dc>)
 800167e:	f7ff f992 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_ADC_ConfigChannel+0x7e8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	099b      	lsrs	r3, r3, #6
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <HAL_ADC_ConfigChannel+0x7ec>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	099b      	lsrs	r3, r3, #6
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800169c:	e002      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f9      	bne.n	800169e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016aa:	e03a      	b.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_ADC_ConfigChannel+0x7f0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d113      	bne.n	80016de <HAL_ADC_ConfigChannel+0x77e>
 80016b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10d      	bne.n	80016de <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_ADC_ConfigChannel+0x7e4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d12a      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d4:	4619      	mov	r1, r3
 80016d6:	4819      	ldr	r0, [pc, #100]	; (800173c <HAL_ADC_ConfigChannel+0x7dc>)
 80016d8:	f7ff f965 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016dc:	e021      	b.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <HAL_ADC_ConfigChannel+0x7f4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d11c      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d116      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_ADC_ConfigChannel+0x7e4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d111      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <HAL_ADC_ConfigChannel+0x7dc>)
 800170a:	f7ff f94c 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
 800170e:	e008      	b.n	8001722 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800172a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800172e:	4618      	mov	r0, r3
 8001730:	37d8      	adds	r7, #216	; 0xd8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	80080000 	.word	0x80080000
 800173c:	50040300 	.word	0x50040300
 8001740:	c7520000 	.word	0xc7520000
 8001744:	50040000 	.word	0x50040000
 8001748:	20000000 	.word	0x20000000
 800174c:	053e2d63 	.word	0x053e2d63
 8001750:	cb840000 	.word	0xcb840000
 8001754:	80000001 	.word	0x80000001

08001758 <LL_ADC_IsEnabled>:
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <LL_ADC_IsEnabled+0x18>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <LL_ADC_IsEnabled+0x1a>
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_REG_IsConversionOngoing>:
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b04      	cmp	r3, #4
 8001790:	d101      	bne.n	8001796 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b09f      	sub	sp, #124	; 0x7c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80017be:	2302      	movs	r3, #2
 80017c0:	e089      	b.n	80018d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80017ca:	2300      	movs	r3, #0
 80017cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80017ce:	2300      	movs	r3, #0
 80017d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a42      	ldr	r2, [pc, #264]	; (80018e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d102      	bne.n	80017e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	e001      	b.n	80017e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f0:	f043 0220 	orr.w	r2, r3, #32
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e068      	b.n	80018d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffb9 	bl	800177e <LL_ADC_REG_IsConversionOngoing>
 800180c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffb3 	bl	800177e <LL_ADC_REG_IsConversionOngoing>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d14a      	bne.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800181e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001820:	2b00      	cmp	r3, #0
 8001822:	d147      	bne.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001826:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d027      	beq.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001842:	035b      	lsls	r3, r3, #13
 8001844:	430b      	orrs	r3, r1
 8001846:	431a      	orrs	r2, r3
 8001848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800184a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800184c:	4824      	ldr	r0, [pc, #144]	; (80018e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800184e:	f7ff ff83 	bl	8001758 <LL_ADC_IsEnabled>
 8001852:	4604      	mov	r4, r0
 8001854:	4823      	ldr	r0, [pc, #140]	; (80018e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001856:	f7ff ff7f 	bl	8001758 <LL_ADC_IsEnabled>
 800185a:	4603      	mov	r3, r0
 800185c:	4323      	orrs	r3, r4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d132      	bne.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800186a:	f023 030f 	bic.w	r3, r3, #15
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	6811      	ldr	r1, [r2, #0]
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	6892      	ldr	r2, [r2, #8]
 8001876:	430a      	orrs	r2, r1
 8001878:	431a      	orrs	r2, r3
 800187a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800187c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800187e:	e023      	b.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800188a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800188c:	4814      	ldr	r0, [pc, #80]	; (80018e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800188e:	f7ff ff63 	bl	8001758 <LL_ADC_IsEnabled>
 8001892:	4604      	mov	r4, r0
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001896:	f7ff ff5f 	bl	8001758 <LL_ADC_IsEnabled>
 800189a:	4603      	mov	r3, r0
 800189c:	4323      	orrs	r3, r4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d112      	bne.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80018a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018aa:	f023 030f 	bic.w	r3, r3, #15
 80018ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018b2:	e009      	b.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	f043 0220 	orr.w	r2, r3, #32
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80018c6:	e000      	b.n	80018ca <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	377c      	adds	r7, #124	; 0x7c
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd90      	pop	{r4, r7, pc}
 80018de:	bf00      	nop
 80018e0:	50040000 	.word	0x50040000
 80018e4:	50040100 	.word	0x50040100
 80018e8:	50040300 	.word	0x50040300

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff3e 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff31 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1e:	e14e      	b.n	8001dbe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8140 	beq.w	8001db8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d005      	beq.n	8001b50 <HAL_GPIO_Init+0x40>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d130      	bne.n	8001bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b86:	2201      	movs	r2, #1
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 0201 	and.w	r2, r3, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d017      	beq.n	8001bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d123      	bne.n	8001c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	6939      	ldr	r1, [r7, #16]
 8001c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0203 	and.w	r2, r3, #3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 809a 	beq.w	8001db8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	4b55      	ldr	r3, [pc, #340]	; (8001ddc <HAL_GPIO_Init+0x2cc>)
 8001c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c88:	4a54      	ldr	r2, [pc, #336]	; (8001ddc <HAL_GPIO_Init+0x2cc>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c90:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <HAL_GPIO_Init+0x2cc>)
 8001c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c9c:	4a50      	ldr	r2, [pc, #320]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cc6:	d013      	beq.n	8001cf0 <HAL_GPIO_Init+0x1e0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a46      	ldr	r2, [pc, #280]	; (8001de4 <HAL_GPIO_Init+0x2d4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00d      	beq.n	8001cec <HAL_GPIO_Init+0x1dc>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a45      	ldr	r2, [pc, #276]	; (8001de8 <HAL_GPIO_Init+0x2d8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <HAL_GPIO_Init+0x1d8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a44      	ldr	r2, [pc, #272]	; (8001dec <HAL_GPIO_Init+0x2dc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_GPIO_Init+0x1d4>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e006      	b.n	8001cf2 <HAL_GPIO_Init+0x1e2>
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	e004      	b.n	8001cf2 <HAL_GPIO_Init+0x1e2>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e002      	b.n	8001cf2 <HAL_GPIO_Init+0x1e2>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_GPIO_Init+0x1e2>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d02:	4937      	ldr	r1, [pc, #220]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d10:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d34:	4a2e      	ldr	r2, [pc, #184]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d5e:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_GPIO_Init+0x2e0>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f47f aea9 	bne.w	8001b20 <HAL_GPIO_Init+0x10>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	48000400 	.word	0x48000400
 8001de8:	48000800 	.word	0x48000800
 8001dec:	48000c00 	.word	0x48000c00
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e081      	b.n	8001f3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fc0a 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	e006      	b.n	8001eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d104      	bne.n	8001ebe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69d9      	ldr	r1, [r3, #28]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d138      	bne.n	8001fca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e032      	b.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2224      	movs	r2, #36	; 0x24
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
  }
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d139      	bne.n	8002062 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e033      	b.n	8002064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800202a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002072:	b08b      	sub	sp, #44	; 0x2c
 8002074:	af06      	add	r7, sp, #24
 8002076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e109      	b.n	8002296 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f007 fbb0 	bl	80097fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fa8f 	bl	80055cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	687e      	ldr	r6, [r7, #4]
 80020b6:	466d      	mov	r5, sp
 80020b8:	f106 0410 	add.w	r4, r6, #16
 80020bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c8:	1d33      	adds	r3, r6, #4
 80020ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f003 fa55 	bl	800557c <USB_CoreInit>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d8      	b.n	8002296 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fa89 	bl	8005602 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e04d      	b.n	8002192 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3305      	adds	r3, #5
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	3304      	adds	r3, #4
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	b298      	uxth	r0, r3
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	333a      	adds	r3, #58	; 0x3a
 8002136:	4602      	mov	r2, r0
 8002138:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	3307      	adds	r3, #7
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	333c      	adds	r3, #60	; 0x3c
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	3340      	adds	r3, #64	; 0x40
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3344      	adds	r3, #68	; 0x44
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	3301      	adds	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3ac      	bcc.n	80020f6 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e044      	b.n	800222c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	3301      	adds	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3b5      	bcc.n	80021a2 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	687e      	ldr	r6, [r7, #4]
 800223e:	466d      	mov	r5, sp
 8002240:	f106 0410 	add.w	r4, r6, #16
 8002244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002250:	1d33      	adds	r3, r6, #4
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f003 f9e1 	bl	800561c <USB_DevInit>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e014      	b.n	8002296 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f001 fc55 	bl	8003b34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f005 fbed 	bl	8007a6e <USB_DevDisconnect>

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800229e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_Start+0x16>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e012      	b.n	80022da <HAL_PCD_Start+0x3c>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 f96c 	bl	800559e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f005 fbb8 	bl	8007a40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f005 fbd2 	bl	8007a98 <USB_ReadInterrupts>
 80022f4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fb3e 	bl	8002982 <PCD_EP_ISR_Handler>

    return;
 8002306:	e110      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d013      	beq.n	800233a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800231a:	b29a      	uxth	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002324:	b292      	uxth	r2, r2
 8002326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f007 fb1d 	bl	800996a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002330:	2100      	movs	r1, #0
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8fc 	bl	8002530 <HAL_PCD_SetAddress>

    return;
 8002338:	e0f7      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00c      	beq.n	800235e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800234c:	b29a      	uxth	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002356:	b292      	uxth	r2, r2
 8002358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800235c:	e0e5      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00c      	beq.n	8002382 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800237a:	b292      	uxth	r2, r2
 800237c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002380:	e0d3      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d034      	beq.n	80023f6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002394:	b29a      	uxth	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	b292      	uxth	r2, r2
 80023a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0208 	bic.w	r2, r2, #8
 80023b6:	b292      	uxth	r2, r2
 80023b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f007 fd7b 	bl	8009ecc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f007 fb00 	bl	80099dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ee:	b292      	uxth	r2, r2
 80023f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023f4:	e099      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d027      	beq.n	8002450 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	b292      	uxth	r2, r2
 8002414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242a:	b292      	uxth	r2, r2
 800242c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0204 	orr.w	r2, r2, #4
 8002442:	b292      	uxth	r2, r2
 8002444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f007 faad 	bl	80099a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800244e:	e06c      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d040      	beq.n	80024dc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246c:	b292      	uxth	r2, r2
 800246e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d12b      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0204 	orr.w	r2, r2, #4
 800248e:	b292      	uxth	r2, r2
 8002490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0208 	orr.w	r2, r2, #8
 80024a6:	b292      	uxth	r2, r2
 80024a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80024bc:	b29b      	uxth	r3, r3
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024ca:	2101      	movs	r1, #1
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f007 fcfd 	bl	8009ecc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80024d2:	e02a      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f007 fa67 	bl	80099a8 <HAL_PCD_SuspendCallback>
    return;
 80024da:	e026      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f8:	b292      	uxth	r2, r2
 80024fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f007 fa25 	bl	800994e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002504:	e011      	b.n	800252a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002522:	b292      	uxth	r2, r2
 8002524:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002528:	bf00      	nop
  }
}
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_PCD_SetAddress+0x1a>
 8002546:	2302      	movs	r3, #2
 8002548:	e013      	b.n	8002572 <HAL_PCD_SetAddress+0x42>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f005 fa58 	bl	8007a18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	4608      	mov	r0, r1
 8002584:	4611      	mov	r1, r2
 8002586:	461a      	mov	r2, r3
 8002588:	4603      	mov	r3, r0
 800258a:	70fb      	strb	r3, [r7, #3]
 800258c:	460b      	mov	r3, r1
 800258e:	803b      	strh	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800259c:	2b00      	cmp	r3, #0
 800259e:	da0f      	bge.n	80025c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	3304      	adds	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	705a      	strb	r2, [r3, #1]
 80025be:	e00f      	b.n	80025e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025ec:	883a      	ldrh	r2, [r7, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	78ba      	ldrb	r2, [r7, #2]
 80025f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800260a:	78bb      	ldrb	r3, [r7, #2]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d102      	bne.n	8002616 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_PCD_EP_Open+0xaa>
 8002620:	2302      	movs	r3, #2
 8002622:	e00e      	b.n	8002642 <HAL_PCD_EP_Open+0xc8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 f814 	bl	8005660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8002640:	7afb      	ldrb	r3, [r7, #11]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da0f      	bge.n	800267e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	705a      	strb	r2, [r3, #1]
 800267c:	e00f      	b.n	800269e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f003 0207 	and.w	r2, r3, #7
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	3304      	adds	r3, #4
 8002696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_PCD_EP_Close+0x6e>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e00e      	b.n	80026d6 <HAL_PCD_EP_Close+0x8c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fb84 	bl	8005dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	460b      	mov	r3, r1
 80026ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ee:	7afb      	ldrb	r3, [r7, #11]
 80026f0:	f003 0207 	and.w	r2, r3, #7
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	b2da      	uxtb	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800272c:	7afb      	ldrb	r3, [r7, #11]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6979      	ldr	r1, [r7, #20]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fd36 	bl	80061ae <USB_EPStartXfer>
 8002742:	e005      	b.n	8002750 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	4618      	mov	r0, r3
 800274c:	f003 fd2f 	bl	80061ae <USB_EPStartXfer>
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	f003 0207 	and.w	r2, r3, #7
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800277c:	681b      	ldr	r3, [r3, #0]
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	460b      	mov	r3, r1
 8002798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279a:	7afb      	ldrb	r3, [r7, #11]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2201      	movs	r2, #1
 80027d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d8:	7afb      	ldrb	r3, [r7, #11]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027e4:	7afb      	ldrb	r3, [r7, #11]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6979      	ldr	r1, [r7, #20]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fcda 	bl	80061ae <USB_EPStartXfer>
 80027fa:	e005      	b.n	8002808 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6979      	ldr	r1, [r7, #20]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fcd3 	bl	80061ae <USB_EPStartXfer>
  }

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	f003 0207 	and.w	r2, r3, #7
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d901      	bls.n	8002830 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e04e      	b.n	80028ce <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002834:	2b00      	cmp	r3, #0
 8002836:	da0f      	bge.n	8002858 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	705a      	strb	r2, [r3, #1]
 8002856:	e00d      	b.n	8002874 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_PCD_EP_SetStall+0x82>
 8002890:	2302      	movs	r3, #2
 8002892:	e01c      	b.n	80028ce <HAL_PCD_EP_SetStall+0xbc>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 ffb9 	bl	800781a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d108      	bne.n	80028c4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f005 f8fa 	bl	8007ab8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d901      	bls.n	80028f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e042      	b.n	800297a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da0f      	bge.n	800291c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	705a      	strb	r2, [r3, #1]
 800291a:	e00f      	b.n	800293c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 0207 	and.w	r2, r3, #7
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_PCD_EP_ClrStall+0x86>
 8002958:	2302      	movs	r3, #2
 800295a:	e00e      	b.n	800297a <HAL_PCD_EP_ClrStall+0xa4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 ffa6 	bl	80078bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b096      	sub	sp, #88	; 0x58
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800298a:	e3a9      	b.n	80030e0 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002994:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002998:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80029a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 8169 	bne.w	8002c82 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d150      	bne.n	8002a5e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029cc:	81fb      	strh	r3, [r7, #14]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029dc:	b29b      	uxth	r3, r3
 80029de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	332c      	adds	r3, #44	; 0x2c
 80029e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	441a      	add	r2, r3
 8002a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a1a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f006 ff7b 	bl	800991a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8357 	beq.w	80030e0 <PCD_EP_ISR_Handler+0x75e>
 8002a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 8352 	bne.w	80030e0 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002a5c:	e340      	b.n	80030e0 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002a64:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a70:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d032      	beq.n	8002ae2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8002aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f005 f84c 	bl	8007b54 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ac8:	4013      	ands	r3, r2
 8002aca:	823b      	strh	r3, [r7, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	8a3a      	ldrh	r2, [r7, #16]
 8002ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f006 fef0 	bl	80098c0 <HAL_PCD_SetupStageCallback>
 8002ae0:	e2fe      	b.n	80030e0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ae2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f280 82fa 	bge.w	80030e0 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002af8:	4013      	ands	r3, r2
 8002afa:	83fb      	strh	r3, [r7, #30]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	8bfa      	ldrh	r2, [r7, #30]
 8002b02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b06:	b292      	uxth	r2, r2
 8002b08:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d019      	beq.n	8002b6e <PCD_EP_ISR_Handler+0x1ec>
 8002b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d015      	beq.n	8002b6e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b48:	6959      	ldr	r1, [r3, #20]
 8002b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f004 fffe 	bl	8007b54 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	441a      	add	r2, r3
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b66:	2100      	movs	r1, #0
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f006 febb 	bl	80098e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 82ad 	bne.w	80030e0 <PCD_EP_ISR_Handler+0x75e>
 8002b86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b92:	f000 82a5 	beq.w	80030e0 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4413      	add	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b3e      	cmp	r3, #62	; 0x3e
 8002bbc:	d918      	bls.n	8002bf0 <PCD_EP_ISR_Handler+0x26e>
 8002bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <PCD_EP_ISR_Handler+0x256>
 8002bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	e029      	b.n	8002c44 <PCD_EP_ISR_Handler+0x2c2>
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d112      	bne.n	8002c1e <PCD_EP_ISR_Handler+0x29c>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	e012      	b.n	8002c44 <PCD_EP_ISR_Handler+0x2c2>
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
 8002c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <PCD_EP_ISR_Handler+0x2b6>
 8002c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c34:	3301      	adds	r3, #1
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	029b      	lsls	r3, r3, #10
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	827b      	strh	r3, [r7, #18]
 8002c56:	8a7b      	ldrh	r3, [r7, #18]
 8002c58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c5c:	827b      	strh	r3, [r7, #18]
 8002c5e:	8a7b      	ldrh	r3, [r7, #18]
 8002c60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c64:	827b      	strh	r3, [r7, #18]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	8a7b      	ldrh	r3, [r7, #18]
 8002c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
 8002c80:	e22e      	b.n	80030e0 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c96:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f280 80f7 	bge.w	8002e8e <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cd6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf0:	7b1b      	ldrb	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d123      	bne.n	8002d3e <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002d1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 808e 	beq.w	8002e44 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2e:	6959      	ldr	r1, [r3, #20]
 8002d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d32:	88da      	ldrh	r2, [r3, #6]
 8002d34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d38:	f004 ff0c 	bl	8007b54 <USB_ReadPMA>
 8002d3c:	e082      	b.n	8002e44 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d40:	78db      	ldrb	r3, [r3, #3]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d10a      	bne.n	8002d5c <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f9d4 	bl	80030fc <HAL_PCD_EP_DB_Receive>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d5a:	e073      	b.n	8002e44 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d022      	beq.n	8002e00 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dde:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002de2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02c      	beq.n	8002e44 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df0:	6959      	ldr	r1, [r3, #20]
 8002df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df4:	891a      	ldrh	r2, [r3, #8]
 8002df6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dfa:	f004 feab 	bl	8007b54 <USB_ReadPMA>
 8002dfe:	e021      	b.n	8002e44 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e24:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e36:	6959      	ldr	r1, [r3, #20]
 8002e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3a:	895a      	ldrh	r2, [r3, #10]
 8002e3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e40:	f004 fe88 	bl	8007b54 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e4c:	441a      	add	r2, r3
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e5a:	441a      	add	r2, r3
 8002e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <PCD_EP_ISR_Handler+0x4f2>
 8002e68:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d206      	bcs.n	8002e82 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f006 fd32 	bl	80098e4 <HAL_PCD_DataOutStageCallback>
 8002e80:	e005      	b.n	8002e8e <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f003 f990 	bl	80061ae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e8e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8122 	beq.w	80030e0 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e9c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ecc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	78db      	ldrb	r3, [r3, #3]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	f040 80a2 	bne.w	800303c <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	7b1b      	ldrb	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8093 	beq.w	800302e <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f08:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d046      	beq.n	8002fa2 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d126      	bne.n	8002f6a <PCD_EP_ISR_Handler+0x5e8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	4413      	add	r3, r2
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	00da      	lsls	r2, r3, #3
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f42:	623b      	str	r3, [r7, #32]
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	e061      	b.n	800302e <PCD_EP_ISR_Handler+0x6ac>
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d15d      	bne.n	800302e <PCD_EP_ISR_Handler+0x6ac>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	4413      	add	r3, r2
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	00da      	lsls	r2, r3, #3
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	4413      	add	r3, r2
 8002f94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	e045      	b.n	800302e <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d126      	bne.n	8002ffe <PCD_EP_ISR_Handler+0x67c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	4413      	add	r3, r2
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	00da      	lsls	r2, r3, #3
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	e017      	b.n	800302e <PCD_EP_ISR_Handler+0x6ac>
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d113      	bne.n	800302e <PCD_EP_ISR_Handler+0x6ac>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003014:	4413      	add	r3, r2
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	00da      	lsls	r2, r3, #3
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	4413      	add	r3, r2
 8003022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	2200      	movs	r2, #0
 800302c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f006 fc70 	bl	800991a <HAL_PCD_DataInStageCallback>
 800303a:	e051      	b.n	80030e0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800303c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d144      	bne.n	80030d2 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	4413      	add	r3, r2
 8003062:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003078:	429a      	cmp	r2, r3
 800307a:	d907      	bls.n	800308c <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 800307c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003084:	1ad2      	subs	r2, r2, r3
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	619a      	str	r2, [r3, #24]
 800308a:	e002      	b.n	8003092 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f006 fc3a 	bl	800991a <HAL_PCD_DataInStageCallback>
 80030a6:	e01b      	b.n	80030e0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80030a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030b0:	441a      	add	r2, r3
 80030b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030be:	441a      	add	r2, r3
 80030c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 f86f 	bl	80061ae <USB_EPStartXfer>
 80030d0:	e006      	b.n	80030e0 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030d6:	461a      	mov	r2, r3
 80030d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f917 	bl	800330e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f6ff ac4d 	blt.w	800298c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3758      	adds	r7, #88	; 0x58
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d07c      	beq.n	800320e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	4413      	add	r3, r2
 800312e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003138:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	8b7b      	ldrh	r3, [r7, #26]
 8003140:	429a      	cmp	r2, r3
 8003142:	d306      	bcc.n	8003152 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	8b7b      	ldrh	r3, [r7, #26]
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	619a      	str	r2, [r3, #24]
 8003150:	e002      	b.n	8003158 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d123      	bne.n	80031a8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	833b      	strh	r3, [r7, #24]
 800317c:	8b3b      	ldrh	r3, [r7, #24]
 800317e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003182:	833b      	strh	r3, [r7, #24]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	8b3b      	ldrh	r3, [r7, #24]
 8003194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01f      	beq.n	80031f2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031cc:	82fb      	strh	r3, [r7, #22]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	8afb      	ldrh	r3, [r7, #22]
 80031de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031f2:	8b7b      	ldrh	r3, [r7, #26]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8085 	beq.w	8003304 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6959      	ldr	r1, [r3, #20]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	891a      	ldrh	r2, [r3, #8]
 8003206:	8b7b      	ldrh	r3, [r7, #26]
 8003208:	f004 fca4 	bl	8007b54 <USB_ReadPMA>
 800320c:	e07a      	b.n	8003304 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4413      	add	r3, r2
 8003228:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003232:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	8b7b      	ldrh	r3, [r7, #26]
 800323a:	429a      	cmp	r2, r3
 800323c:	d306      	bcc.n	800324c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	8b7b      	ldrh	r3, [r7, #26]
 8003244:	1ad2      	subs	r2, r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	619a      	str	r2, [r3, #24]
 800324a:	e002      	b.n	8003252 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d123      	bne.n	80032a2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003274:	83fb      	strh	r3, [r7, #30]
 8003276:	8bfb      	ldrh	r3, [r7, #30]
 8003278:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800327c:	83fb      	strh	r3, [r7, #30]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	8bfb      	ldrh	r3, [r7, #30]
 800328e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329e:	b29b      	uxth	r3, r3
 80032a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11f      	bne.n	80032ec <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	83bb      	strh	r3, [r7, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	8bbb      	ldrh	r3, [r7, #28]
 80032d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032ec:	8b7b      	ldrh	r3, [r7, #26]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6959      	ldr	r1, [r3, #20]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	895a      	ldrh	r2, [r3, #10]
 80032fe:	8b7b      	ldrh	r3, [r7, #26]
 8003300:	f004 fc28 	bl	8007b54 <USB_ReadPMA>
    }
  }

  return count;
 8003304:	8b7b      	ldrh	r3, [r7, #26]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b0a2      	sub	sp, #136	; 0x88
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	4613      	mov	r3, r2
 800331a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 81c5 	beq.w	80036b2 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003330:	b29b      	uxth	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	4413      	add	r3, r2
 8003342:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800334c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003358:	429a      	cmp	r2, r3
 800335a:	d907      	bls.n	800336c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003364:	1ad2      	subs	r2, r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	619a      	str	r2, [r3, #24]
 800336a:	e002      	b.n	8003372 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 80b9 	bne.w	80034ee <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d126      	bne.n	80033d2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	4413      	add	r3, r2
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	00da      	lsls	r2, r3, #3
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	4413      	add	r3, r2
 80033a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	801a      	strh	r2, [r3, #0]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	801a      	strh	r2, [r3, #0]
 80033d0:	e01a      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0xfa>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d116      	bne.n	8003408 <HAL_PCD_EP_DB_Transmit+0xfa>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	4413      	add	r3, r2
 80033f0:	633b      	str	r3, [r7, #48]	; 0x30
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	00da      	lsls	r2, r3, #3
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	4413      	add	r3, r2
 80033fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	2200      	movs	r2, #0
 8003406:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	785b      	ldrb	r3, [r3, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d126      	bne.n	8003464 <HAL_PCD_EP_DB_Transmit+0x156>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003424:	b29b      	uxth	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00da      	lsls	r2, r3, #3
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4413      	add	r3, r2
 8003438:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003448:	b29a      	uxth	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	801a      	strh	r2, [r3, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800345c:	b29a      	uxth	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	e017      	b.n	8003494 <HAL_PCD_EP_DB_Transmit+0x186>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d113      	bne.n	8003494 <HAL_PCD_EP_DB_Transmit+0x186>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	4413      	add	r3, r2
 800347c:	623b      	str	r3, [r7, #32]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	00da      	lsls	r2, r3, #3
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	4413      	add	r3, r2
 8003488:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2200      	movs	r2, #0
 8003492:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f006 fa3d 	bl	800991a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 82d2 	beq.w	8003a50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	827b      	strh	r3, [r7, #18]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	8a7b      	ldrh	r3, [r7, #18]
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
 80034ec:	e2b0      	b.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d021      	beq.n	800353c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003542:	2b01      	cmp	r3, #1
 8003544:	f040 8284 	bne.w	8003a50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003550:	441a      	add	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800355e:	441a      	add	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d309      	bcc.n	8003584 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	621a      	str	r2, [r3, #32]
 8003582:	e015      	b.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800358c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003590:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800359a:	e009      	b.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d155      	bne.n	8003664 <HAL_PCD_EP_DB_Transmit+0x356>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	4413      	add	r3, r2
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	00da      	lsls	r2, r3, #3
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	4413      	add	r3, r2
 80035da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
 80035e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e2:	2b3e      	cmp	r3, #62	; 0x3e
 80035e4:	d916      	bls.n	8003614 <HAL_PCD_EP_DB_Transmit+0x306>
 80035e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_PCD_EP_DB_Transmit+0x2ee>
 80035f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f8:	3b01      	subs	r3, #1
 80035fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80035fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fe:	b29b      	uxth	r3, r3
 8003600:	029b      	lsls	r3, r3, #10
 8003602:	b29b      	uxth	r3, r3
 8003604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360c:	b29a      	uxth	r2, r3
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	e043      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x38e>
 8003614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003616:	2b00      	cmp	r3, #0
 8003618:	d112      	bne.n	8003640 <HAL_PCD_EP_DB_Transmit+0x332>
 800361a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003624:	b29a      	uxth	r2, r3
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003638:	b29a      	uxth	r2, r3
 800363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	e02d      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x38e>
 8003640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_PCD_EP_DB_Transmit+0x348>
 8003650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003652:	3301      	adds	r3, #1
 8003654:	64bb      	str	r3, [r7, #72]	; 0x48
 8003656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003658:	b29b      	uxth	r3, r3
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	b29a      	uxth	r2, r3
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e01b      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x38e>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d117      	bne.n	800369c <HAL_PCD_EP_DB_Transmit+0x38e>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	4413      	add	r3, r2
 8003682:	643b      	str	r3, [r7, #64]	; 0x40
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	00da      	lsls	r2, r3, #3
 800368a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368c:	4413      	add	r3, r2
 800368e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003696:	b29a      	uxth	r2, r3
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6959      	ldr	r1, [r3, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	891a      	ldrh	r2, [r3, #8]
 80036a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f004 fa10 	bl	8007ad0 <USB_WritePMA>
 80036b0:	e1ce      	b.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d307      	bcc.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	619a      	str	r2, [r3, #24]
 80036f4:	e002      	b.n	80036fc <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 80c4 	bne.w	800388e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d126      	bne.n	800375c <HAL_PCD_EP_DB_Transmit+0x44e>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	66bb      	str	r3, [r7, #104]	; 0x68
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371c:	b29b      	uxth	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003722:	4413      	add	r3, r2
 8003724:	66bb      	str	r3, [r7, #104]	; 0x68
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	00da      	lsls	r2, r3, #3
 800372c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800372e:	4413      	add	r3, r2
 8003730:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003734:	667b      	str	r3, [r7, #100]	; 0x64
 8003736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003740:	b29a      	uxth	r2, r3
 8003742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003754:	b29a      	uxth	r2, r3
 8003756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e01a      	b.n	8003792 <HAL_PCD_EP_DB_Transmit+0x484>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d116      	bne.n	8003792 <HAL_PCD_EP_DB_Transmit+0x484>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	673b      	str	r3, [r7, #112]	; 0x70
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003778:	4413      	add	r3, r2
 800377a:	673b      	str	r3, [r7, #112]	; 0x70
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	00da      	lsls	r2, r3, #3
 8003782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003784:	4413      	add	r3, r2
 8003786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800378a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	2200      	movs	r2, #0
 8003790:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	785b      	ldrb	r3, [r3, #1]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d12f      	bne.n	8003800 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b8:	4413      	add	r3, r2
 80037ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	00da      	lsls	r2, r3, #3
 80037c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037c8:	4413      	add	r3, r2
 80037ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037de:	b29a      	uxth	r2, r3
 80037e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	e017      	b.n	8003830 <HAL_PCD_EP_DB_Transmit+0x522>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d113      	bne.n	8003830 <HAL_PCD_EP_DB_Transmit+0x522>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003816:	4413      	add	r3, r2
 8003818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	00da      	lsls	r2, r3, #3
 8003820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003822:	4413      	add	r3, r2
 8003824:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003828:	67bb      	str	r3, [r7, #120]	; 0x78
 800382a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800382c:	2200      	movs	r2, #0
 800382e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f006 f86f 	bl	800991a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 8104 	bne.w	8003a50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	441a      	add	r2, r3
 8003874:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800387c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	b29b      	uxth	r3, r3
 800388a:	8013      	strh	r3, [r2, #0]
 800388c:	e0e0      	b.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d121      	bne.n	80038dc <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	441a      	add	r2, r3
 80038c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	b29b      	uxth	r3, r3
 80038da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 80b4 	bne.w	8003a50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038f0:	441a      	add	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038fe:	441a      	add	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d309      	bcc.n	8003924 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	1ad2      	subs	r2, r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	621a      	str	r2, [r3, #32]
 8003922:	e015      	b.n	8003950 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800392c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003930:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800393a:	e009      	b.n	8003950 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	663b      	str	r3, [r7, #96]	; 0x60
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d155      	bne.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x6fc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	65bb      	str	r3, [r7, #88]	; 0x58
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396c:	b29b      	uxth	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003972:	4413      	add	r3, r2
 8003974:	65bb      	str	r3, [r7, #88]	; 0x58
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	00da      	lsls	r2, r3, #3
 800397c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800397e:	4413      	add	r3, r2
 8003980:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003984:	657b      	str	r3, [r7, #84]	; 0x54
 8003986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003988:	2b3e      	cmp	r3, #62	; 0x3e
 800398a:	d916      	bls.n	80039ba <HAL_PCD_EP_DB_Transmit+0x6ac>
 800398c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	677b      	str	r3, [r7, #116]	; 0x74
 8003992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <HAL_PCD_EP_DB_Transmit+0x694>
 800399c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800399e:	3b01      	subs	r3, #1
 80039a0:	677b      	str	r3, [r7, #116]	; 0x74
 80039a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	029b      	lsls	r3, r3, #10
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	e040      	b.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x72e>
 80039ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d112      	bne.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80039c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039de:	b29a      	uxth	r2, r3
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	e02a      	b.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x72e>
 80039e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	677b      	str	r3, [r7, #116]	; 0x74
 80039ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_PCD_EP_DB_Transmit+0x6ee>
 80039f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f8:	3301      	adds	r3, #1
 80039fa:	677b      	str	r3, [r7, #116]	; 0x74
 80039fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	029b      	lsls	r3, r3, #10
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	e018      	b.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d114      	bne.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a20:	4413      	add	r3, r2
 8003a22:	663b      	str	r3, [r7, #96]	; 0x60
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	00da      	lsls	r2, r3, #3
 8003a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6959      	ldr	r1, [r3, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	895a      	ldrh	r2, [r3, #10]
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f004 f840 	bl	8007ad0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6a:	823b      	strh	r3, [r7, #16]
 8003a6c:	8a3b      	ldrh	r3, [r7, #16]
 8003a6e:	f083 0310 	eor.w	r3, r3, #16
 8003a72:	823b      	strh	r3, [r7, #16]
 8003a74:	8a3b      	ldrh	r3, [r7, #16]
 8003a76:	f083 0320 	eor.w	r3, r3, #32
 8003a7a:	823b      	strh	r3, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	8a3b      	ldrh	r3, [r7, #16]
 8003a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3788      	adds	r7, #136	; 0x88
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	817b      	strh	r3, [r7, #10]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003abc:	897b      	ldrh	r3, [r7, #10]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac8:	897b      	ldrh	r3, [r7, #10]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e00a      	b.n	8003af8 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ae2:	897a      	ldrh	r2, [r7, #10]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	80da      	strh	r2, [r3, #6]
 8003b0c:	e00b      	b.n	8003b26 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2201      	movs	r2, #1
 8003b12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f043 0302 	orr.w	r3, r3, #2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40007000 	.word	0x40007000

08003ba4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb2:	d130      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb4:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc0:	d038      	beq.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bca:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2232      	movs	r2, #50	; 0x32
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0c9b      	lsrs	r3, r3, #18
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be8:	e002      	b.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d102      	bne.n	8003c04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f2      	bne.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c10:	d110      	bne.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e00f      	b.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d007      	beq.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c2c:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40007000 	.word	0x40007000
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	431bde83 	.word	0x431bde83

08003c50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5e:	6053      	str	r3, [r2, #4]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40007000 	.word	0x40007000

08003c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f000 bc4f 	b.w	8004522 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c84:	4b97      	ldr	r3, [pc, #604]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c8e:	4b95      	ldr	r3, [pc, #596]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80e6 	beq.w	8003e72 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4c>
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	f040 808d 	bne.w	8003dce <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	f040 8089 	bne.w	8003dce <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cbc:	4b89      	ldr	r3, [pc, #548]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d006      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x66>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f000 bc26 	b.w	8004522 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cda:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x80>
 8003ce6:	4b7f      	ldr	r3, [pc, #508]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cee:	e005      	b.n	8003cfc <HAL_RCC_OscConfig+0x8c>
 8003cf0:	4b7c      	ldr	r3, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d224      	bcs.n	8003d4a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fd9f 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f000 bc06 	b.w	8004522 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d16:	4b73      	ldr	r3, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a72      	ldr	r2, [pc, #456]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	f043 0308 	orr.w	r3, r3, #8
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	496d      	ldr	r1, [pc, #436]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d34:	4b6b      	ldr	r3, [pc, #428]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	4968      	ldr	r1, [pc, #416]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
 8003d48:	e025      	b.n	8003d96 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d4a:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a65      	ldr	r2, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d50:	f043 0308 	orr.w	r3, r3, #8
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	4960      	ldr	r1, [pc, #384]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d68:	4b5e      	ldr	r3, [pc, #376]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	495b      	ldr	r1, [pc, #364]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fd5e 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e3c5      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d96:	f000 fccd 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	4950      	ldr	r1, [pc, #320]	; (8003ee8 <HAL_RCC_OscConfig+0x278>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	4a4e      	ldr	r2, [pc, #312]	; (8003eec <HAL_RCC_OscConfig+0x27c>)
 8003db4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003db6:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fd84 	bl	80008c8 <HAL_InitTick>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d052      	beq.n	8003e70 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	e3a9      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d032      	beq.n	8003e3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dd6:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003de2:	f7fc fdc1 	bl	8000968 <HAL_GetTick>
 8003de6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dea:	f7fc fdbd 	bl	8000968 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e392      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a35      	ldr	r2, [pc, #212]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e0e:	f043 0308 	orr.w	r3, r3, #8
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	4930      	ldr	r1, [pc, #192]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e26:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	492b      	ldr	r1, [pc, #172]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	604b      	str	r3, [r1, #4]
 8003e3a:	e01a      	b.n	8003e72 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a28      	ldr	r2, [pc, #160]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e48:	f7fc fd8e 	bl	8000968 <HAL_GetTick>
 8003e4c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e50:	f7fc fd8a 	bl	8000968 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e35f      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1e0>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d073      	beq.n	8003f66 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_OscConfig+0x220>
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d10e      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d063      	beq.n	8003f64 <HAL_RCC_OscConfig+0x2f4>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d15f      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e33c      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x250>
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e025      	b.n	8003f0c <HAL_RCC_OscConfig+0x29c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec8:	d114      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x284>
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a02      	ldr	r2, [pc, #8]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e013      	b.n	8003f0c <HAL_RCC_OscConfig+0x29c>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	0800a02c 	.word	0x0800a02c
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	20000004 	.word	0x20000004
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a8e      	ldr	r2, [pc, #568]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b8c      	ldr	r3, [pc, #560]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a8b      	ldr	r2, [pc, #556]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fc fd28 	bl	8000968 <HAL_GetTick>
 8003f18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fc fd24 	bl	8000968 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e2f9      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	4b81      	ldr	r3, [pc, #516]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x2ac>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fc fd14 	bl	8000968 <HAL_GetTick>
 8003f40:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fc fd10 	bl	8000968 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e2e5      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f56:	4b77      	ldr	r3, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x2d4>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d060      	beq.n	8004034 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_OscConfig+0x314>
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d116      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f84:	4b6b      	ldr	r3, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_OscConfig+0x32c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e2c2      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	4962      	ldr	r1, [pc, #392]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb0:	e040      	b.n	8004034 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d023      	beq.n	8004002 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fba:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5d      	ldr	r2, [pc, #372]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fc fccf 	bl	8000968 <HAL_GetTick>
 8003fca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fc fccb 	bl	8000968 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e2a0      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe0:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b51      	ldr	r3, [pc, #324]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	494e      	ldr	r1, [pc, #312]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e018      	b.n	8004034 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a4b      	ldr	r2, [pc, #300]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fc fcab 	bl	8000968 <HAL_GetTick>
 8004012:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004016:	f7fc fca7 	bl	8000968 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e27c      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8082 	beq.w	8004146 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d05f      	beq.n	800410a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004050:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	429a      	cmp	r2, r3
 800405e:	d037      	beq.n	80040d0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e254      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004082:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004092:	f7fc fc69 	bl	8000968 <HAL_GetTick>
 8004096:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409a:	f7fc fc65 	bl	8000968 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b11      	cmp	r3, #17
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e23a      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ef      	bne.n	800409a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80040ba:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c0:	f023 0210 	bic.w	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	491a      	ldr	r1, [pc, #104]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d0:	4b18      	ldr	r3, [pc, #96]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fc fc42 	bl	8000968 <HAL_GetTick>
 80040e4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e8:	f7fc fc3e 	bl	8000968 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b11      	cmp	r3, #17
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e213      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <HAL_RCC_OscConfig+0x478>
 8004108:	e01d      	b.n	8004146 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411a:	f7fc fc25 	bl	8000968 <HAL_GetTick>
 800411e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004122:	f7fc fc21 	bl	8000968 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b11      	cmp	r3, #17
 800412e:	d903      	bls.n	8004138 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e1f6      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
 8004134:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004138:	4ba9      	ldr	r3, [pc, #676]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ed      	bne.n	8004122 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80bd 	beq.w	80042ce <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800415a:	4ba1      	ldr	r3, [pc, #644]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10e      	bne.n	8004184 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	4b9e      	ldr	r3, [pc, #632]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	4a9d      	ldr	r2, [pc, #628]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800416c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004170:	6593      	str	r3, [r2, #88]	; 0x58
 8004172:	4b9b      	ldr	r3, [pc, #620]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004184:	4b97      	ldr	r3, [pc, #604]	; (80043e4 <HAL_RCC_OscConfig+0x774>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d118      	bne.n	80041c2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004190:	4b94      	ldr	r3, [pc, #592]	; (80043e4 <HAL_RCC_OscConfig+0x774>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a93      	ldr	r2, [pc, #588]	; (80043e4 <HAL_RCC_OscConfig+0x774>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419c:	f7fc fbe4 	bl	8000968 <HAL_GetTick>
 80041a0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a4:	f7fc fbe0 	bl	8000968 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e1b5      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b6:	4b8b      	ldr	r3, [pc, #556]	; (80043e4 <HAL_RCC_OscConfig+0x774>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02c      	beq.n	8004228 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80041ce:	4b84      	ldr	r3, [pc, #528]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	497f      	ldr	r1, [pc, #508]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d010      	beq.n	8004216 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80041f4:	4b7a      	ldr	r3, [pc, #488]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a79      	ldr	r2, [pc, #484]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004204:	4b76      	ldr	r3, [pc, #472]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	4a75      	ldr	r2, [pc, #468]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004214:	e018      	b.n	8004248 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004216:	4b72      	ldr	r3, [pc, #456]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	4a70      	ldr	r2, [pc, #448]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004226:	e00f      	b.n	8004248 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004228:	4b6d      	ldr	r3, [pc, #436]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	4a6c      	ldr	r2, [pc, #432]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004238:	4b69      	ldr	r3, [pc, #420]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a68      	ldr	r2, [pc, #416]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d016      	beq.n	800427e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004250:	f7fc fb8a 	bl	8000968 <HAL_GetTick>
 8004254:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004256:	e00a      	b.n	800426e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fc fb86 	bl	8000968 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e159      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426e:	4b5c      	ldr	r3, [pc, #368]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ed      	beq.n	8004258 <HAL_RCC_OscConfig+0x5e8>
 800427c:	e01d      	b.n	80042ba <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427e:	f7fc fb73 	bl	8000968 <HAL_GetTick>
 8004282:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fc fb6f 	bl	8000968 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e142      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800429c:	4b50      	ldr	r3, [pc, #320]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1ed      	bne.n	8004286 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80042aa:	4b4d      	ldr	r3, [pc, #308]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80042b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	4a46      	ldr	r2, [pc, #280]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80042c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03c      	beq.n	8004354 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01c      	beq.n	800431c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042e2:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80042e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e8:	4a3d      	ldr	r2, [pc, #244]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fc fb39 	bl	8000968 <HAL_GetTick>
 80042f6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042fa:	f7fc fb35 	bl	8000968 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e10a      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800430e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0ef      	beq.n	80042fa <HAL_RCC_OscConfig+0x68a>
 800431a:	e01b      	b.n	8004354 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800431c:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800431e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004322:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fc fb1c 	bl	8000968 <HAL_GetTick>
 8004330:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004334:	f7fc fb18 	bl	8000968 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0ed      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 8004348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ef      	bne.n	8004334 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80e1 	beq.w	8004520 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	2b02      	cmp	r3, #2
 8004364:	f040 80b5 	bne.w	80044d2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0203 	and.w	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	429a      	cmp	r2, r3
 800437a:	d124      	bne.n	80043c6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	3b01      	subs	r3, #1
 8004388:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d11b      	bne.n	80043c6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d113      	bne.n	80043c6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d05f      	beq.n	8004486 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d05a      	beq.n	8004482 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a03      	ldr	r2, [pc, #12]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80043d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043d8:	f7fc fac6 	bl	8000968 <HAL_GetTick>
 80043dc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043de:	e00c      	b.n	80043fa <HAL_RCC_OscConfig+0x78a>
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fc fabe 	bl	8000968 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e093      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fa:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004406:	4b49      	ldr	r3, [pc, #292]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	4b49      	ldr	r3, [pc, #292]	; (8004530 <HAL_RCC_OscConfig+0x8c0>)
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004416:	3a01      	subs	r2, #1
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	4311      	orrs	r1, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004420:	0212      	lsls	r2, r2, #8
 8004422:	4311      	orrs	r1, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004428:	0852      	lsrs	r2, r2, #1
 800442a:	3a01      	subs	r2, #1
 800442c:	0552      	lsls	r2, r2, #21
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004434:	0852      	lsrs	r2, r2, #1
 8004436:	3a01      	subs	r2, #1
 8004438:	0652      	lsls	r2, r2, #25
 800443a:	430a      	orrs	r2, r1
 800443c:	493b      	ldr	r1, [pc, #236]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004442:	4b3a      	ldr	r3, [pc, #232]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a39      	ldr	r2, [pc, #228]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4a36      	ldr	r2, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004458:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800445a:	f7fc fa85 	bl	8000968 <HAL_GetTick>
 800445e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fc fa81 	bl	8000968 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e056      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004474:	4b2d      	ldr	r3, [pc, #180]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004480:	e04e      	b.n	8004520 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e04d      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d146      	bne.n	8004520 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a25      	ldr	r2, [pc, #148]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800449e:	4b23      	ldr	r3, [pc, #140]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4a22      	ldr	r2, [pc, #136]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 80044a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044aa:	f7fc fa5d 	bl	8000968 <HAL_GetTick>
 80044ae:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fc fa59 	bl	8000968 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e02e      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x842>
 80044d0:	e026      	b.n	8004520 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	d021      	beq.n	800451c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fc fa40 	bl	8000968 <HAL_GetTick>
 80044e8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fc fa3c 	bl	8000968 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e011      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	4a07      	ldr	r2, [pc, #28]	; (800452c <HAL_RCC_OscConfig+0x8bc>)
 8004510:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004514:	f023 0303 	bic.w	r3, r3, #3
 8004518:	60d3      	str	r3, [r2, #12]
 800451a:	e001      	b.n	8004520 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3728      	adds	r7, #40	; 0x28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
 8004530:	f99f808c 	.word	0xf99f808c

08004534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0e7      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004548:	4b75      	ldr	r3, [pc, #468]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d910      	bls.n	8004578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b72      	ldr	r3, [pc, #456]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 0207 	bic.w	r2, r3, #7
 800455e:	4970      	ldr	r1, [pc, #448]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b6e      	ldr	r3, [pc, #440]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0cf      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	4b66      	ldr	r3, [pc, #408]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004590:	429a      	cmp	r2, r3
 8004592:	d908      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004594:	4b63      	ldr	r3, [pc, #396]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4960      	ldr	r1, [pc, #384]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d04c      	beq.n	800464c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ba:	4b5a      	ldr	r3, [pc, #360]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d121      	bne.n	800460a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0a6      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d2:	4b54      	ldr	r3, [pc, #336]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d115      	bne.n	800460a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e09a      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ea:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e08e      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045fa:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e086      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b46      	ldr	r3, [pc, #280]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4943      	ldr	r1, [pc, #268]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fc f9a4 	bl	8000968 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fc f9a0 	bl	8000968 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e06e      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b3a      	ldr	r3, [pc, #232]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	429a      	cmp	r2, r3
 8004666:	d208      	bcs.n	800467a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	492b      	ldr	r1, [pc, #172]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800467a:	4b29      	ldr	r3, [pc, #164]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d210      	bcs.n	80046aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 0207 	bic.w	r2, r3, #7
 8004690:	4923      	ldr	r1, [pc, #140]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_RCC_ClockConfig+0x1ec>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e036      	b.n	8004718 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4918      	ldr	r1, [pc, #96]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d4:	4b13      	ldr	r3, [pc, #76]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4910      	ldr	r1, [pc, #64]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046e8:	f000 f824 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <HAL_RCC_ClockConfig+0x1f0>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	490b      	ldr	r1, [pc, #44]	; (8004728 <HAL_RCC_ClockConfig+0x1f4>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1f8>)
 8004706:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1fc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fc f8db 	bl	80008c8 <HAL_InitTick>
 8004712:	4603      	mov	r3, r0
 8004714:	72fb      	strb	r3, [r7, #11]

  return status;
 8004716:	7afb      	ldrb	r3, [r7, #11]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40022000 	.word	0x40022000
 8004724:	40021000 	.word	0x40021000
 8004728:	0800a02c 	.word	0x0800a02c
 800472c:	20000000 	.word	0x20000000
 8004730:	20000004 	.word	0x20000004

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x34>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d121      	bne.n	80047a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d11e      	bne.n	80047a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d107      	bne.n	8004784 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004774:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e005      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004784:	4b2d      	ldr	r3, [pc, #180]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004790:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d102      	bne.n	80047b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e004      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d134      	bne.n	800482c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047c2:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d003      	beq.n	80047da <HAL_RCC_GetSysClockFreq+0xa6>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d003      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0xac>
 80047d8:	e005      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_RCC_GetSysClockFreq+0x110>)
 80047dc:	617b      	str	r3, [r7, #20]
      break;
 80047de:	e005      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047e0:	4b18      	ldr	r3, [pc, #96]	; (8004844 <HAL_RCC_GetSysClockFreq+0x110>)
 80047e2:	617b      	str	r3, [r7, #20]
      break;
 80047e4:	e002      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	617b      	str	r3, [r7, #20]
      break;
 80047ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	3301      	adds	r3, #1
 80047f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	fb03 f202 	mul.w	r2, r3, r2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_RCC_GetSysClockFreq+0x108>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	0e5b      	lsrs	r3, r3, #25
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	3301      	adds	r3, #1
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800482c:	69bb      	ldr	r3, [r7, #24]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	0800a03c 	.word	0x0800a03c
 8004844:	00f42400 	.word	0x00f42400

08004848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004854:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004860:	f7ff f992 	bl	8003b88 <HAL_PWREx_GetVoltageRange>
 8004864:	6178      	str	r0, [r7, #20]
 8004866:	e014      	b.n	8004892 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	4a24      	ldr	r2, [pc, #144]	; (8004900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004872:	6593      	str	r3, [r2, #88]	; 0x58
 8004874:	4b22      	ldr	r3, [pc, #136]	; (8004900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004880:	f7ff f982 	bl	8003b88 <HAL_PWREx_GetVoltageRange>
 8004884:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004886:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800488c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004890:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004898:	d10b      	bne.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b80      	cmp	r3, #128	; 0x80
 800489e:	d919      	bls.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2ba0      	cmp	r3, #160	; 0xa0
 80048a4:	d902      	bls.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048a6:	2302      	movs	r3, #2
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	e013      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048ac:	2301      	movs	r3, #1
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	e010      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d902      	bls.n	80048be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048b8:	2303      	movs	r3, #3
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	e00a      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b80      	cmp	r3, #128	; 0x80
 80048c2:	d102      	bne.n	80048ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048c4:	2302      	movs	r3, #2
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	e004      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b70      	cmp	r3, #112	; 0x70
 80048ce:	d101      	bne.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048d0:	2301      	movs	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 0207 	bic.w	r2, r3, #7
 80048dc:	4909      	ldr	r1, [pc, #36]	; (8004904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048e4:	4b07      	ldr	r3, [pc, #28]	; (8004904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d001      	beq.n	80048f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	40022000 	.word	0x40022000

08004908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004910:	2300      	movs	r3, #0
 8004912:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004914:	2300      	movs	r3, #0
 8004916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 809e 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800492a:	4b46      	ldr	r3, [pc, #280]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004940:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	4a3f      	ldr	r2, [pc, #252]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	6593      	str	r3, [r2, #88]	; 0x58
 800494c:	4b3d      	ldr	r3, [pc, #244]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004958:	2301      	movs	r3, #1
 800495a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800495c:	4b3a      	ldr	r3, [pc, #232]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004968:	f7fb fffe 	bl	8000968 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800496e:	e009      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004970:	f7fb fffa 	bl	8000968 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d902      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	74fb      	strb	r3, [r7, #19]
        break;
 8004982:	e005      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004984:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ef      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d15a      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004996:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01e      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d019      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049be:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049de:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fb ffba 	bl	8000968 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e00b      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fb ffb6 	bl	8000968 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d902      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004a0e:	e006      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0ec      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4904      	ldr	r1, [pc, #16]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a3a:	e009      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a50:	7c7b      	ldrb	r3, [r7, #17]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4b6e      	ldr	r3, [pc, #440]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	4a6d      	ldr	r2, [pc, #436]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6e:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f023 0203 	bic.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4964      	ldr	r1, [pc, #400]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a90:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 020c 	bic.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	495c      	ldr	r1, [pc, #368]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab2:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4953      	ldr	r1, [pc, #332]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad4:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	494b      	ldr	r1, [pc, #300]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004af6:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	4942      	ldr	r1, [pc, #264]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b18:	4b3d      	ldr	r3, [pc, #244]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	493a      	ldr	r1, [pc, #232]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b3a:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4931      	ldr	r1, [pc, #196]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	4929      	ldr	r1, [pc, #164]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b7e:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	4920      	ldr	r1, [pc, #128]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	4918      	ldr	r1, [pc, #96]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bbe:	d105      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc0:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bca:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d015      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	490a      	ldr	r1, [pc, #40]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c04:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000

08004c14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e049      	b.n	8004cba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fb fd6a 	bl	8000714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f000 f94a 	bl	8004eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0ff      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b14      	cmp	r3, #20
 8004cee:	f200 80f0 	bhi.w	8004ed2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004ed3 	.word	0x08004ed3
 8004d00:	08004ed3 	.word	0x08004ed3
 8004d04:	08004ed3 	.word	0x08004ed3
 8004d08:	08004d8d 	.word	0x08004d8d
 8004d0c:	08004ed3 	.word	0x08004ed3
 8004d10:	08004ed3 	.word	0x08004ed3
 8004d14:	08004ed3 	.word	0x08004ed3
 8004d18:	08004dcf 	.word	0x08004dcf
 8004d1c:	08004ed3 	.word	0x08004ed3
 8004d20:	08004ed3 	.word	0x08004ed3
 8004d24:	08004ed3 	.word	0x08004ed3
 8004d28:	08004e0f 	.word	0x08004e0f
 8004d2c:	08004ed3 	.word	0x08004ed3
 8004d30:	08004ed3 	.word	0x08004ed3
 8004d34:	08004ed3 	.word	0x08004ed3
 8004d38:	08004e51 	.word	0x08004e51
 8004d3c:	08004ed3 	.word	0x08004ed3
 8004d40:	08004ed3 	.word	0x08004ed3
 8004d44:	08004ed3 	.word	0x08004ed3
 8004d48:	08004e91 	.word	0x08004e91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f92e 	bl	8004fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0208 	orr.w	r2, r2, #8
 8004d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6999      	ldr	r1, [r3, #24]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	619a      	str	r2, [r3, #24]
      break;
 8004d8a:	e0a5      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f98a 	bl	80050ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]
      break;
 8004dcc:	e084      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f9e3 	bl	80051a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0208 	orr.w	r2, r2, #8
 8004de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0204 	bic.w	r2, r2, #4
 8004df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69d9      	ldr	r1, [r3, #28]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	61da      	str	r2, [r3, #28]
      break;
 8004e0c:	e064      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fa3b 	bl	8005290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	021a      	lsls	r2, r3, #8
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	61da      	str	r2, [r3, #28]
      break;
 8004e4e:	e043      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa78 	bl	800534c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e8e:	e023      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fab0 	bl	80053fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	021a      	lsls	r2, r3, #8
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ed0:	e002      	b.n	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a2a      	ldr	r2, [pc, #168]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_Base_SetConfig+0x20>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d108      	bne.n	8004f1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x52>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x52>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <TIM_Base_SetConfig+0xc0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x52>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <TIM_Base_SetConfig+0xc4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0xa0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <TIM_Base_SetConfig+0xc0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0xa0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a0a      	ldr	r2, [pc, #40]	; (8004fb0 <TIM_Base_SetConfig+0xc4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400

08004fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 0302 	bic.w	r3, r3, #2
 8005000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <TIM_OC1_SetConfig+0xec>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC1_SetConfig+0x70>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_OC1_SetConfig+0xf0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC1_SetConfig+0x70>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <TIM_OC1_SetConfig+0xf4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10c      	bne.n	800503e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0308 	bic.w	r3, r3, #8
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0304 	bic.w	r3, r3, #4
 800503c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <TIM_OC1_SetConfig+0xec>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_OC1_SetConfig+0xa2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <TIM_OC1_SetConfig+0xf0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC1_SetConfig+0xa2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <TIM_OC1_SetConfig+0xf4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d111      	bne.n	800507a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800505c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400

080050ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f023 0210 	bic.w	r2, r3, #16
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0320 	bic.w	r3, r3, #32
 80050fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a22      	ldr	r2, [pc, #136]	; (8005194 <TIM_OC2_SetConfig+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10d      	bne.n	800512c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a19      	ldr	r2, [pc, #100]	; (8005194 <TIM_OC2_SetConfig+0xe8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_OC2_SetConfig+0x98>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <TIM_OC2_SetConfig+0xec>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC2_SetConfig+0x98>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <TIM_OC2_SetConfig+0xf0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d113      	bne.n	800516c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400

080051a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a21      	ldr	r2, [pc, #132]	; (8005284 <TIM_OC3_SetConfig+0xe4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10d      	bne.n	800521e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <TIM_OC3_SetConfig+0xe4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d007      	beq.n	8005236 <TIM_OC3_SetConfig+0x96>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a17      	ldr	r2, [pc, #92]	; (8005288 <TIM_OC3_SetConfig+0xe8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <TIM_OC3_SetConfig+0x96>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <TIM_OC3_SetConfig+0xec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d113      	bne.n	800525e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800523c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400

08005290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a14      	ldr	r2, [pc, #80]	; (8005340 <TIM_OC4_SetConfig+0xb0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC4_SetConfig+0x74>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <TIM_OC4_SetConfig+0xb4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC4_SetConfig+0x74>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <TIM_OC4_SetConfig+0xb8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400

0800534c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <TIM_OC5_SetConfig+0xa4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <TIM_OC5_SetConfig+0x6a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <TIM_OC5_SetConfig+0xa8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC5_SetConfig+0x6a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <TIM_OC5_SetConfig+0xac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d109      	bne.n	80053ca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400

080053fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	051b      	lsls	r3, r3, #20
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a14      	ldr	r2, [pc, #80]	; (80054a4 <TIM_OC6_SetConfig+0xa8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_OC6_SetConfig+0x6c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <TIM_OC6_SetConfig+0xac>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC6_SetConfig+0x6c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a12      	ldr	r2, [pc, #72]	; (80054ac <TIM_OC6_SetConfig+0xb0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d109      	bne.n	800547c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400

080054b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e04f      	b.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a21      	ldr	r2, [pc, #132]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005530:	d004      	beq.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a10      	ldr	r2, [pc, #64]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d10c      	bne.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40014000 	.word	0x40014000

0800557c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800557c:	b084      	sub	sp, #16
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	f107 0014 	add.w	r0, r7, #20
 800558a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	b004      	add	sp, #16
 800559c:	4770      	bx	lr

0800559e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055ae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4013      	ands	r3, r2
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800561c:	b084      	sub	sp, #16
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	f107 0014 	add.w	r0, r7, #20
 800562a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	b004      	add	sp, #16
 800565c:	4770      	bx	lr
	...

08005660 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005660:	b480      	push	{r7}
 8005662:	b09d      	sub	sp, #116	; 0x74
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d81f      	bhi.n	80056d2 <USB_ActivateEndpoint+0x72>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <USB_ActivateEndpoint+0x38>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056a9 	.word	0x080056a9
 800569c:	080056c5 	.word	0x080056c5
 80056a0:	080056db 	.word	0x080056db
 80056a4:	080056b7 	.word	0x080056b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80056b4:	e012      	b.n	80056dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80056c2:	e00b      	b.n	80056dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80056d0:	e004      	b.n	80056dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80056d8:	e000      	b.n	80056dc <USB_ActivateEndpoint+0x7c>
      break;
 80056da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	b21b      	sxth	r3, r3
 800570e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	b21a      	sxth	r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	b21b      	sxth	r3, r3
 800571e:	4313      	orrs	r3, r2
 8005720:	b21b      	sxth	r3, r3
 8005722:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	7b1b      	ldrb	r3, [r3, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 816e 	bne.w	8005a2e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8084 	beq.w	8005864 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	4413      	add	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	00da      	lsls	r2, r3, #3
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	88db      	ldrh	r3, [r3, #6]
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	b29b      	uxth	r3, r3
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	827b      	strh	r3, [r7, #18]
 800579e:	8a7b      	ldrh	r3, [r7, #18]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01b      	beq.n	80057e0 <USB_ActivateEndpoint+0x180>
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	823b      	strh	r3, [r7, #16]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	8a3b      	ldrh	r3, [r7, #16]
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	78db      	ldrb	r3, [r3, #3]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d020      	beq.n	800582a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fe:	81bb      	strh	r3, [r7, #12]
 8005800:	89bb      	ldrh	r3, [r7, #12]
 8005802:	f083 0320 	eor.w	r3, r3, #32
 8005806:	81bb      	strh	r3, [r7, #12]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	89bb      	ldrh	r3, [r7, #12]
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]
 8005828:	e2cb      	b.n	8005dc2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005840:	81fb      	strh	r3, [r7, #14]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	89fb      	ldrh	r3, [r7, #14]
 800584e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585e:	b29b      	uxth	r3, r3
 8005860:	8013      	strh	r3, [r2, #0]
 8005862:	e2ae      	b.n	8005dc2 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	633b      	str	r3, [r7, #48]	; 0x30
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	4413      	add	r3, r2
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	00da      	lsls	r2, r3, #3
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	4413      	add	r3, r2
 8005882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	88db      	ldrh	r3, [r3, #6]
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	4413      	add	r3, r2
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00da      	lsls	r2, r3, #3
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	4413      	add	r3, r2
 80058b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b3e      	cmp	r3, #62	; 0x3e
 80058c2:	d918      	bls.n	80058f6 <USB_ActivateEndpoint+0x296>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <USB_ActivateEndpoint+0x27e>
 80058d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058da:	3b01      	subs	r3, #1
 80058dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80058de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	029b      	lsls	r3, r3, #10
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e029      	b.n	800594a <USB_ActivateEndpoint+0x2ea>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d112      	bne.n	8005924 <USB_ActivateEndpoint+0x2c4>
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005908:	b29a      	uxth	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591c:	b29a      	uxth	r2, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	801a      	strh	r2, [r3, #0]
 8005922:	e012      	b.n	800594a <USB_ActivateEndpoint+0x2ea>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	66bb      	str	r3, [r7, #104]	; 0x68
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <USB_ActivateEndpoint+0x2de>
 8005938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800593a:	3301      	adds	r3, #1
 800593c:	66bb      	str	r3, [r7, #104]	; 0x68
 800593e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005940:	b29b      	uxth	r3, r3
 8005942:	029b      	lsls	r3, r3, #10
 8005944:	b29a      	uxth	r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	847b      	strh	r3, [r7, #34]	; 0x22
 8005958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800595a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01b      	beq.n	800599a <USB_ActivateEndpoint+0x33a>
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	843b      	strh	r3, [r7, #32]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	8c3b      	ldrh	r3, [r7, #32]
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d124      	bne.n	80059ec <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	83bb      	strh	r3, [r7, #28]
 80059ba:	8bbb      	ldrh	r3, [r7, #28]
 80059bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059c0:	83bb      	strh	r3, [r7, #28]
 80059c2:	8bbb      	ldrh	r3, [r7, #28]
 80059c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059c8:	83bb      	strh	r3, [r7, #28]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	8bbb      	ldrh	r3, [r7, #28]
 80059d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	8013      	strh	r3, [r2, #0]
 80059ea:	e1ea      	b.n	8005dc2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	83fb      	strh	r3, [r7, #30]
 8005a04:	8bfb      	ldrh	r3, [r7, #30]
 8005a06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a0a:	83fb      	strh	r3, [r7, #30]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	8bfb      	ldrh	r3, [r7, #30]
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
 8005a2c:	e1c9      	b.n	8005dc2 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	78db      	ldrb	r3, [r3, #3]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d11e      	bne.n	8005a74 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]
 8005a72:	e01d      	b.n	8005ab0 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac0:	4413      	add	r3, r2
 8005ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	00da      	lsls	r2, r3, #3
 8005aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	891b      	ldrh	r3, [r3, #8]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af4:	4413      	add	r3, r2
 8005af6:	657b      	str	r3, [r7, #84]	; 0x54
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	00da      	lsls	r2, r3, #3
 8005afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b06:	653b      	str	r3, [r7, #80]	; 0x50
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	895b      	ldrh	r3, [r3, #10]
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 8093 	bne.w	8005c48 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005b32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01b      	beq.n	8005b76 <USB_ActivateEndpoint+0x516>
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01b      	beq.n	8005bc6 <USB_ActivateEndpoint+0x566>
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	441a      	add	r2, r3
 8005bb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005be0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005be4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005be6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005be8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bec:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	441a      	add	r2, r3
 8005bf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	e0bc      	b.n	8005dc2 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005c58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01d      	beq.n	8005ca0 <USB_ActivateEndpoint+0x640>
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005cb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01d      	beq.n	8005cf8 <USB_ActivateEndpoint+0x698>
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	78db      	ldrb	r3, [r3, #3]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d024      	beq.n	8005d4a <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d1e:	f083 0320 	eor.w	r3, r3, #32
 8005d22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	441a      	add	r2, r3
 8005d30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]
 8005d48:	e01d      	b.n	8005d86 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005dc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3774      	adds	r7, #116	; 0x74
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop

08005dd4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b08d      	sub	sp, #52	; 0x34
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	7b1b      	ldrb	r3, [r3, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 808e 	bne.w	8005f04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d044      	beq.n	8005e7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	81bb      	strh	r3, [r7, #12]
 8005dfe:	89bb      	ldrh	r3, [r7, #12]
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <USB_DeactivateEndpoint+0x6c>
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	817b      	strh	r3, [r7, #10]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	897b      	ldrh	r3, [r7, #10]
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e56:	813b      	strh	r3, [r7, #8]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	893b      	ldrh	r3, [r7, #8]
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
 8005e78:	e192      	b.n	80061a0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	827b      	strh	r3, [r7, #18]
 8005e88:	8a7b      	ldrh	r3, [r7, #18]
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01b      	beq.n	8005eca <USB_DeactivateEndpoint+0xf6>
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	823b      	strh	r3, [r7, #16]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	441a      	add	r2, r3
 8005eb4:	8a3b      	ldrh	r3, [r7, #16]
 8005eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	81fb      	strh	r3, [r7, #14]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	89fb      	ldrh	r3, [r7, #14]
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
 8005f02:	e14d      	b.n	80061a0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f040 80a5 	bne.w	8006058 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	843b      	strh	r3, [r7, #32]
 8005f1c:	8c3b      	ldrh	r3, [r7, #32]
 8005f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01b      	beq.n	8005f5e <USB_DeactivateEndpoint+0x18a>
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	83fb      	strh	r3, [r7, #30]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	8bfb      	ldrh	r3, [r7, #30]
 8005f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	83bb      	strh	r3, [r7, #28]
 8005f6c:	8bbb      	ldrh	r3, [r7, #28]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01b      	beq.n	8005fae <USB_DeactivateEndpoint+0x1da>
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	837b      	strh	r3, [r7, #26]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8b7b      	ldrh	r3, [r7, #26]
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc4:	833b      	strh	r3, [r7, #24]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	8b3b      	ldrh	r3, [r7, #24]
 8005fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffc:	82fb      	strh	r3, [r7, #22]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	8afb      	ldrh	r3, [r7, #22]
 800600a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601a:	b29b      	uxth	r3, r3
 800601c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	82bb      	strh	r3, [r7, #20]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	441a      	add	r2, r3
 8006040:	8abb      	ldrh	r3, [r7, #20]
 8006042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	b29b      	uxth	r3, r3
 8006054:	8013      	strh	r3, [r2, #0]
 8006056:	e0a3      	b.n	80061a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <USB_DeactivateEndpoint+0x2d4>
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80060b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <USB_DeactivateEndpoint+0x324>
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006146:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3734      	adds	r7, #52	; 0x34
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b0c2      	sub	sp, #264	; 0x108
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061bc:	6018      	str	r0, [r3, #0]
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	f040 867b 	bne.w	8006ed0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d908      	bls.n	8006208 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80061f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006206:	e007      	b.n	8006218 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	7b1b      	ldrb	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d13a      	bne.n	800629e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6959      	ldr	r1, [r3, #20]
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	88da      	ldrh	r2, [r3, #6]
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	b29b      	uxth	r3, r3
 8006246:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800624a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800624e:	6800      	ldr	r0, [r0, #0]
 8006250:	f001 fc3e 	bl	8007ad0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	00da      	lsls	r2, r3, #3
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	f000 bde3 	b.w	8006e64 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	f040 843a 	bne.w	8006b24 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80062b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6a1a      	ldr	r2, [r3, #32]
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	f240 83b7 	bls.w	8006a3c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 81b3 	beq.w	80066d6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	633b      	str	r3, [r7, #48]	; 0x30
 800637c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d16d      	bne.n	8006468 <USB_EPStartXfer+0x2ba>
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	4413      	add	r3, r2
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	00da      	lsls	r2, r3, #3
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063cc:	2b3e      	cmp	r3, #62	; 0x3e
 80063ce:	d91c      	bls.n	800640a <USB_EPStartXfer+0x25c>
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <USB_EPStartXfer+0x242>
 80063e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ea:	3b01      	subs	r3, #1
 80063ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	029b      	lsls	r3, r3, #10
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006402:	b29a      	uxth	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e053      	b.n	80064b2 <USB_EPStartXfer+0x304>
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640e:	2b00      	cmp	r3, #0
 8006410:	d112      	bne.n	8006438 <USB_EPStartXfer+0x28a>
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800641c:	b29a      	uxth	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006430:	b29a      	uxth	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e03c      	b.n	80064b2 <USB_EPStartXfer+0x304>
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <USB_EPStartXfer+0x2aa>
 800644e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006452:	3301      	adds	r3, #1
 8006454:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006458:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800645c:	b29b      	uxth	r3, r3
 800645e:	029b      	lsls	r3, r3, #10
 8006460:	b29a      	uxth	r2, r3
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e024      	b.n	80064b2 <USB_EPStartXfer+0x304>
 8006468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d11c      	bne.n	80064b2 <USB_EPStartXfer+0x304>
 8006478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	4413      	add	r3, r2
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	00da      	lsls	r2, r3, #3
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	895b      	ldrh	r3, [r3, #10]
 80064be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6959      	ldr	r1, [r3, #20]
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064e0:	6800      	ldr	r0, [r0, #0]
 80064e2:	f001 faf5 	bl	8007ad0 <USB_WritePMA>
            ep->xfer_buff += len;
 80064e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f6:	441a      	add	r2, r3
 80064f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d90f      	bls.n	8006540 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	621a      	str	r2, [r3, #32]
 800653e:	e00e      	b.n	800655e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800655e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d16d      	bne.n	800664a <USB_EPStartXfer+0x49c>
 800656e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006588:	b29b      	uxth	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	4413      	add	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	00da      	lsls	r2, r3, #3
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	4413      	add	r3, r2
 80065a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	2b3e      	cmp	r3, #62	; 0x3e
 80065b0:	d91c      	bls.n	80065ec <USB_EPStartXfer+0x43e>
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <USB_EPStartXfer+0x424>
 80065c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065cc:	3b01      	subs	r3, #1
 80065ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29b      	uxth	r3, r3
 80065dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	e059      	b.n	80066a0 <USB_EPStartXfer+0x4f2>
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d112      	bne.n	800661a <USB_EPStartXfer+0x46c>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065fe:	b29a      	uxth	r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006612:	b29a      	uxth	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	e042      	b.n	80066a0 <USB_EPStartXfer+0x4f2>
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <USB_EPStartXfer+0x48c>
 8006630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006634:	3301      	adds	r3, #1
 8006636:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800663a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663e:	b29b      	uxth	r3, r3
 8006640:	029b      	lsls	r3, r3, #10
 8006642:	b29a      	uxth	r2, r3
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e02a      	b.n	80066a0 <USB_EPStartXfer+0x4f2>
 800664a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d122      	bne.n	80066a0 <USB_EPStartXfer+0x4f2>
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	4413      	add	r3, r2
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	00da      	lsls	r2, r3, #3
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	4413      	add	r3, r2
 8006690:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	b29a      	uxth	r2, r3
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	891b      	ldrh	r3, [r3, #8]
 80066ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6959      	ldr	r1, [r3, #20]
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066ce:	6800      	ldr	r0, [r0, #0]
 80066d0:	f001 f9fe 	bl	8007ad0 <USB_WritePMA>
 80066d4:	e3c6      	b.n	8006e64 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d16d      	bne.n	80067c2 <USB_EPStartXfer+0x614>
 80066e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006706:	4413      	add	r3, r2
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	00da      	lsls	r2, r3, #3
 8006718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671a:	4413      	add	r3, r2
 800671c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006720:	647b      	str	r3, [r7, #68]	; 0x44
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	2b3e      	cmp	r3, #62	; 0x3e
 8006728:	d91c      	bls.n	8006764 <USB_EPStartXfer+0x5b6>
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <USB_EPStartXfer+0x59c>
 8006740:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006744:	3b01      	subs	r3, #1
 8006746:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800674a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800674e:	b29b      	uxth	r3, r3
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	b29b      	uxth	r3, r3
 8006754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675c:	b29a      	uxth	r2, r3
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e059      	b.n	8006818 <USB_EPStartXfer+0x66a>
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006768:	2b00      	cmp	r3, #0
 800676a:	d112      	bne.n	8006792 <USB_EPStartXfer+0x5e4>
 800676c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006776:	b29a      	uxth	r2, r3
 8006778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678a:	b29a      	uxth	r2, r3
 800678c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	e042      	b.n	8006818 <USB_EPStartXfer+0x66a>
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <USB_EPStartXfer+0x604>
 80067a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ac:	3301      	adds	r3, #1
 80067ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	029b      	lsls	r3, r3, #10
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	e02a      	b.n	8006818 <USB_EPStartXfer+0x66a>
 80067c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d122      	bne.n	8006818 <USB_EPStartXfer+0x66a>
 80067d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	653b      	str	r3, [r7, #80]	; 0x50
 80067de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f2:	4413      	add	r3, r2
 80067f4:	653b      	str	r3, [r7, #80]	; 0x50
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	00da      	lsls	r2, r3, #3
 8006804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006806:	4413      	add	r3, r2
 8006808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800680c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006812:	b29a      	uxth	r2, r3
 8006814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006816:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	891b      	ldrh	r3, [r3, #8]
 8006824:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6959      	ldr	r1, [r3, #20]
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006838:	b29b      	uxth	r3, r3
 800683a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800683e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006842:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006846:	6800      	ldr	r0, [r0, #0]
 8006848:	f001 f942 	bl	8007ad0 <USB_WritePMA>
            ep->xfer_buff += len;
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695a      	ldr	r2, [r3, #20]
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685c:	441a      	add	r2, r3
 800685e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	429a      	cmp	r2, r3
 8006884:	d90f      	bls.n	80068a6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	1ad2      	subs	r2, r2, r3
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	621a      	str	r2, [r3, #32]
 80068a4:	e00e      	b.n	80068c4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d16d      	bne.n	80069bc <USB_EPStartXfer+0x80e>
 80068e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	4413      	add	r3, r2
 8006902:	63bb      	str	r3, [r7, #56]	; 0x38
 8006904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	00da      	lsls	r2, r3, #3
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	4413      	add	r3, r2
 8006916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	2b3e      	cmp	r3, #62	; 0x3e
 8006922:	d91c      	bls.n	800695e <USB_EPStartXfer+0x7b0>
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <USB_EPStartXfer+0x796>
 800693a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693e:	3b01      	subs	r3, #1
 8006940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	b29b      	uxth	r3, r3
 800694a:	029b      	lsls	r3, r3, #10
 800694c:	b29b      	uxth	r3, r3
 800694e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006956:	b29a      	uxth	r2, r3
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	e053      	b.n	8006a06 <USB_EPStartXfer+0x858>
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	2b00      	cmp	r3, #0
 8006964:	d112      	bne.n	800698c <USB_EPStartXfer+0x7de>
 8006966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006970:	b29a      	uxth	r2, r3
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006984:	b29a      	uxth	r2, r3
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	801a      	strh	r2, [r3, #0]
 800698a:	e03c      	b.n	8006a06 <USB_EPStartXfer+0x858>
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d004      	beq.n	80069ac <USB_EPStartXfer+0x7fe>
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a6:	3301      	adds	r3, #1
 80069a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	029b      	lsls	r3, r3, #10
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	801a      	strh	r2, [r3, #0]
 80069ba:	e024      	b.n	8006a06 <USB_EPStartXfer+0x858>
 80069bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d11c      	bne.n	8006a06 <USB_EPStartXfer+0x858>
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069da:	b29b      	uxth	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e0:	4413      	add	r3, r2
 80069e2:	643b      	str	r3, [r7, #64]	; 0x40
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	00da      	lsls	r2, r3, #3
 80069f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	895b      	ldrh	r3, [r3, #10]
 8006a12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6959      	ldr	r1, [r3, #20]
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a34:	6800      	ldr	r0, [r0, #0]
 8006a36:	f001 f84b 	bl	8007ad0 <USB_WritePMA>
 8006a3a:	e213      	b.n	8006e64 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac8:	4413      	add	r3, r2
 8006aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00da      	lsls	r2, r3, #3
 8006ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006adc:	4413      	add	r3, r2
 8006ade:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	891b      	ldrh	r3, [r3, #8]
 8006afa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6959      	ldr	r1, [r3, #20]
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b1c:	6800      	ldr	r0, [r0, #0]
 8006b1e:	f000 ffd7 	bl	8007ad0 <USB_WritePMA>
 8006b22:	e19f      	b.n	8006e64 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b34:	1ad2      	subs	r2, r2, r3
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 80bc 	beq.w	8006ce2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	673b      	str	r3, [r7, #112]	; 0x70
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d16d      	bne.n	8006c62 <USB_EPStartXfer+0xab4>
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ba6:	4413      	add	r3, r2
 8006ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	00da      	lsls	r2, r3, #3
 8006bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bba:	4413      	add	r3, r2
 8006bbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006bc8:	d91c      	bls.n	8006c04 <USB_EPStartXfer+0xa56>
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <USB_EPStartXfer+0xa3c>
 8006be0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e053      	b.n	8006cac <USB_EPStartXfer+0xafe>
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d112      	bne.n	8006c32 <USB_EPStartXfer+0xa84>
 8006c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c1a:	801a      	strh	r2, [r3, #0]
 8006c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e03c      	b.n	8006cac <USB_EPStartXfer+0xafe>
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <USB_EPStartXfer+0xaa4>
 8006c48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e024      	b.n	8006cac <USB_EPStartXfer+0xafe>
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d11c      	bne.n	8006cac <USB_EPStartXfer+0xafe>
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c86:	4413      	add	r3, r2
 8006c88:	673b      	str	r3, [r7, #112]	; 0x70
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	00da      	lsls	r2, r3, #3
 8006c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	895b      	ldrh	r3, [r3, #10]
 8006cb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6959      	ldr	r1, [r3, #20]
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cda:	6800      	ldr	r0, [r0, #0]
 8006cdc:	f000 fef8 	bl	8007ad0 <USB_WritePMA>
 8006ce0:	e0c0      	b.n	8006e64 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d16d      	bne.n	8006dce <USB_EPStartXfer+0xc20>
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d12:	4413      	add	r3, r2
 8006d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	00da      	lsls	r2, r3, #3
 8006d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d26:	4413      	add	r3, r2
 8006d28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d32:	2b3e      	cmp	r3, #62	; 0x3e
 8006d34:	d91c      	bls.n	8006d70 <USB_EPStartXfer+0xbc2>
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	f003 031f 	and.w	r3, r3, #31
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <USB_EPStartXfer+0xba8>
 8006d4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d50:	3b01      	subs	r3, #1
 8006d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	e05f      	b.n	8006e30 <USB_EPStartXfer+0xc82>
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d112      	bne.n	8006d9e <USB_EPStartXfer+0xbf0>
 8006d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e048      	b.n	8006e30 <USB_EPStartXfer+0xc82>
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <USB_EPStartXfer+0xc10>
 8006db4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006db8:	3301      	adds	r3, #1
 8006dba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	029b      	lsls	r3, r3, #10
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	e030      	b.n	8006e30 <USB_EPStartXfer+0xc82>
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d128      	bne.n	8006e30 <USB_EPStartXfer+0xc82>
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e02:	4413      	add	r3, r2
 8006e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	00da      	lsls	r2, r3, #3
 8006e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	891b      	ldrh	r3, [r3, #8]
 8006e3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6959      	ldr	r1, [r3, #20]
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e5e:	6800      	ldr	r0, [r0, #0]
 8006e60:	f000 fe36 	bl	8007ad0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8a:	817b      	strh	r3, [r7, #10]
 8006e8c:	897b      	ldrh	r3, [r7, #10]
 8006e8e:	f083 0310 	eor.w	r3, r3, #16
 8006e92:	817b      	strh	r3, [r7, #10]
 8006e94:	897b      	ldrh	r3, [r7, #10]
 8006e96:	f083 0320 	eor.w	r3, r3, #32
 8006e9a:	817b      	strh	r3, [r7, #10]
 8006e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	441a      	add	r2, r3
 8006eb6:	897b      	ldrh	r3, [r7, #10]
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]
 8006ecc:	f000 bc9f 	b.w	800780e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	7b1b      	ldrb	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 80ae 	bne.w	800703e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d917      	bls.n	8006f2e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	619a      	str	r2, [r3, #24]
 8006f2c:	e00e      	b.n	8006f4c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f70:	4413      	add	r3, r2
 8006f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	00da      	lsls	r2, r3, #3
 8006f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f96:	2b3e      	cmp	r3, #62	; 0x3e
 8006f98:	d91d      	bls.n	8006fd6 <USB_EPStartXfer+0xe28>
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <USB_EPStartXfer+0xe0c>
 8006fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	e3e1      	b.n	800779a <USB_EPStartXfer+0x15ec>
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <USB_EPStartXfer+0xe5e>
 8006fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e3c6      	b.n	800779a <USB_EPStartXfer+0x15ec>
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <USB_EPStartXfer+0xe7e>
 8007022:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007026:	3301      	adds	r3, #1
 8007028:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800702c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29a      	uxth	r2, r3
 8007036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800703a:	801a      	strh	r2, [r3, #0]
 800703c:	e3ad      	b.n	800779a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	78db      	ldrb	r3, [r3, #3]
 800704a:	2b02      	cmp	r3, #2
 800704c:	f040 8200 	bne.w	8007450 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 8091 	bne.w	8007184 <USB_EPStartXfer+0xfd6>
 8007062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007086:	4413      	add	r3, r2
 8007088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	00da      	lsls	r2, r3, #3
 800709a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800709e:	4413      	add	r3, r2
 80070a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b3e      	cmp	r3, #62	; 0x3e
 80070b6:	d925      	bls.n	8007104 <USB_EPStartXfer+0xf56>
 80070b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d104      	bne.n	80070e8 <USB_EPStartXfer+0xf3a>
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e2:	3b01      	subs	r3, #1
 80070e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	e074      	b.n	80071ee <USB_EPStartXfer+0x1040>
 8007104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d116      	bne.n	8007142 <USB_EPStartXfer+0xf94>
 8007114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007138:	b29a      	uxth	r2, r3
 800713a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	e055      	b.n	80071ee <USB_EPStartXfer+0x1040>
 8007142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d004      	beq.n	8007172 <USB_EPStartXfer+0xfc4>
 8007168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716c:	3301      	adds	r3, #1
 800716e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	b29b      	uxth	r3, r3
 8007178:	029b      	lsls	r3, r3, #10
 800717a:	b29a      	uxth	r2, r3
 800717c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	e034      	b.n	80071ee <USB_EPStartXfer+0x1040>
 8007184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d12c      	bne.n	80071ee <USB_EPStartXfer+0x1040>
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071b8:	4413      	add	r3, r2
 80071ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	00da      	lsls	r2, r3, #3
 80071cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071d0:	4413      	add	r3, r2
 80071d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f040 8091 	bne.w	8007330 <USB_EPStartXfer+0x1182>
 800720e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800721c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722a:	b29b      	uxth	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007232:	4413      	add	r3, r2
 8007234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	00da      	lsls	r2, r3, #3
 8007246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800724a:	4413      	add	r3, r2
 800724c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b3e      	cmp	r3, #62	; 0x3e
 8007262:	d925      	bls.n	80072b0 <USB_EPStartXfer+0x1102>
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	095b      	lsrs	r3, r3, #5
 8007272:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <USB_EPStartXfer+0x10e6>
 800728a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728e:	3b01      	subs	r3, #1
 8007290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007298:	b29b      	uxth	r3, r3
 800729a:	029b      	lsls	r3, r3, #10
 800729c:	b29b      	uxth	r3, r3
 800729e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	e06d      	b.n	800738c <USB_EPStartXfer+0x11de>
 80072b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d116      	bne.n	80072ee <USB_EPStartXfer+0x1140>
 80072c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e04e      	b.n	800738c <USB_EPStartXfer+0x11de>
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <USB_EPStartXfer+0x1170>
 8007314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007318:	3301      	adds	r3, #1
 800731a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800731e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007322:	b29b      	uxth	r3, r3
 8007324:	029b      	lsls	r3, r3, #10
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e02d      	b.n	800738c <USB_EPStartXfer+0x11de>
 8007330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d125      	bne.n	800738c <USB_EPStartXfer+0x11de>
 8007340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734e:	b29b      	uxth	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007356:	4413      	add	r3, r2
 8007358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	00da      	lsls	r2, r3, #3
 800736a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800736e:	4413      	add	r3, r2
 8007370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	b29a      	uxth	r2, r3
 8007386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800738a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800738c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 81fe 	beq.w	800779a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <USB_EPStartXfer+0x1228>
 80073ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10d      	bne.n	80073f2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 81db 	bne.w	800779a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 81d4 	bne.w	800779a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007418:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]
 800744e:	e1a4      	b.n	800779a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	78db      	ldrb	r3, [r3, #3]
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 819a 	bne.w	8007796 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	429a      	cmp	r2, r3
 800747c:	d917      	bls.n	80074ae <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800747e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	619a      	str	r2, [r3, #24]
 80074ac:	e00e      	b.n	80074cc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2200      	movs	r2, #0
 80074ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	785b      	ldrb	r3, [r3, #1]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d178      	bne.n	80075ce <USB_EPStartXfer+0x1420>
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007500:	4413      	add	r3, r2
 8007502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	00da      	lsls	r2, r3, #3
 8007514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007518:	4413      	add	r3, r2
 800751a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800751e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007526:	2b3e      	cmp	r3, #62	; 0x3e
 8007528:	d91d      	bls.n	8007566 <USB_EPStartXfer+0x13b8>
 800752a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	2b00      	cmp	r3, #0
 800753e:	d104      	bne.n	800754a <USB_EPStartXfer+0x139c>
 8007540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007544:	3b01      	subs	r3, #1
 8007546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800754a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754e:	b29b      	uxth	r3, r3
 8007550:	029b      	lsls	r3, r3, #10
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e064      	b.n	8007630 <USB_EPStartXfer+0x1482>
 8007566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756a:	2b00      	cmp	r3, #0
 800756c:	d116      	bne.n	800759c <USB_EPStartXfer+0x13ee>
 800756e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e049      	b.n	8007630 <USB_EPStartXfer+0x1482>
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <USB_EPStartXfer+0x140e>
 80075b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b6:	3301      	adds	r3, #1
 80075b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	e030      	b.n	8007630 <USB_EPStartXfer+0x1482>
 80075ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d128      	bne.n	8007630 <USB_EPStartXfer+0x1482>
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007602:	4413      	add	r3, r2
 8007604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	00da      	lsls	r2, r3, #3
 8007616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800761a:	4413      	add	r3, r2
 800761c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007628:	b29a      	uxth	r2, r3
 800762a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800762e:	801a      	strh	r2, [r3, #0]
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800763e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d178      	bne.n	8007740 <USB_EPStartXfer+0x1592>
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800765c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766a:	b29b      	uxth	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007672:	4413      	add	r3, r2
 8007674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	00da      	lsls	r2, r3, #3
 8007686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800768a:	4413      	add	r3, r2
 800768c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007698:	2b3e      	cmp	r3, #62	; 0x3e
 800769a:	d91d      	bls.n	80076d8 <USB_EPStartXfer+0x152a>
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a0:	095b      	lsrs	r3, r3, #5
 80076a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076aa:	f003 031f 	and.w	r3, r3, #31
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d104      	bne.n	80076bc <USB_EPStartXfer+0x150e>
 80076b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b6:	3b01      	subs	r3, #1
 80076b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	029b      	lsls	r3, r3, #10
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	e060      	b.n	800779a <USB_EPStartXfer+0x15ec>
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d116      	bne.n	800770e <USB_EPStartXfer+0x1560>
 80076e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076f2:	801a      	strh	r2, [r3, #0]
 80076f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	e045      	b.n	800779a <USB_EPStartXfer+0x15ec>
 800770e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007712:	085b      	lsrs	r3, r3, #1
 8007714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <USB_EPStartXfer+0x1580>
 8007724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007728:	3301      	adds	r3, #1
 800772a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800772e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007732:	b29b      	uxth	r3, r3
 8007734:	029b      	lsls	r3, r3, #10
 8007736:	b29a      	uxth	r2, r3
 8007738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800773c:	801a      	strh	r2, [r3, #0]
 800773e:	e02c      	b.n	800779a <USB_EPStartXfer+0x15ec>
 8007740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d124      	bne.n	800779a <USB_EPStartXfer+0x15ec>
 8007750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775e:	b29b      	uxth	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007766:	4413      	add	r3, r2
 8007768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800776c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	00da      	lsls	r2, r3, #3
 800777a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800777e:	4413      	add	r3, r2
 8007780:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007784:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778c:	b29a      	uxth	r2, r3
 800778e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	e001      	b.n	800779a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e03a      	b.n	8007810 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780a:	b29b      	uxth	r3, r3
 800780c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d020      	beq.n	800786e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007842:	81bb      	strh	r3, [r7, #12]
 8007844:	89bb      	ldrh	r3, [r7, #12]
 8007846:	f083 0310 	eor.w	r3, r3, #16
 800784a:	81bb      	strh	r3, [r7, #12]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	441a      	add	r2, r3
 8007856:	89bb      	ldrh	r3, [r7, #12]
 8007858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800785c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007868:	b29b      	uxth	r3, r3
 800786a:	8013      	strh	r3, [r2, #0]
 800786c:	e01f      	b.n	80078ae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007884:	81fb      	strh	r3, [r7, #14]
 8007886:	89fb      	ldrh	r3, [r7, #14]
 8007888:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800788c:	81fb      	strh	r3, [r7, #14]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	441a      	add	r2, r3
 8007898:	89fb      	ldrh	r3, [r7, #14]
 800789a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	7b1b      	ldrb	r3, [r3, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f040 809d 	bne.w	8007a0a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d04c      	beq.n	8007972 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	823b      	strh	r3, [r7, #16]
 80078e6:	8a3b      	ldrh	r3, [r7, #16]
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01b      	beq.n	8007928 <USB_EPClearStall+0x6c>
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	81fb      	strh	r3, [r7, #14]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	89fb      	ldrh	r3, [r7, #14]
 8007914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007920:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007924:	b29b      	uxth	r3, r3
 8007926:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	78db      	ldrb	r3, [r3, #3]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d06c      	beq.n	8007a0a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007946:	81bb      	strh	r3, [r7, #12]
 8007948:	89bb      	ldrh	r3, [r7, #12]
 800794a:	f083 0320 	eor.w	r3, r3, #32
 800794e:	81bb      	strh	r3, [r7, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	441a      	add	r2, r3
 800795a:	89bb      	ldrh	r3, [r7, #12]
 800795c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796c:	b29b      	uxth	r3, r3
 800796e:	8013      	strh	r3, [r2, #0]
 8007970:	e04b      	b.n	8007a0a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	82fb      	strh	r3, [r7, #22]
 8007980:	8afb      	ldrh	r3, [r7, #22]
 8007982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01b      	beq.n	80079c2 <USB_EPClearStall+0x106>
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a0:	82bb      	strh	r3, [r7, #20]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	441a      	add	r2, r3
 80079ac:	8abb      	ldrh	r3, [r7, #20]
 80079ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d8:	827b      	strh	r3, [r7, #18]
 80079da:	8a7b      	ldrh	r3, [r7, #18]
 80079dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079e0:	827b      	strh	r3, [r7, #18]
 80079e2:	8a7b      	ldrh	r3, [r7, #18]
 80079e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079e8:	827b      	strh	r3, [r7, #18]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	441a      	add	r2, r3
 80079f4:	8a7b      	ldrh	r3, [r7, #18]
 80079f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d103      	bne.n	8007a32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2280      	movs	r2, #128	; 0x80
 8007a2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b08b      	sub	sp, #44	; 0x2c
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4611      	mov	r1, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	460b      	mov	r3, r1
 8007ae0:	80fb      	strh	r3, [r7, #6]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ae6:	88bb      	ldrh	r3, [r7, #4]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b00:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
 8007b06:	e01b      	b.n	8007b40 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	3301      	adds	r3, #1
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	b21a      	sxth	r2, r3
 8007b18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	b21b      	sxth	r3, r3
 8007b20:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	8a7a      	ldrh	r2, [r7, #18]
 8007b26:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	3301      	adds	r3, #1
 8007b32:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	3301      	adds	r3, #1
 8007b38:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e0      	bne.n	8007b08 <USB_WritePMA+0x38>
  }
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	372c      	adds	r7, #44	; 0x2c
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b08b      	sub	sp, #44	; 0x2c
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	461a      	mov	r2, r3
 8007b62:	460b      	mov	r3, r1
 8007b64:	80fb      	strh	r3, [r7, #6]
 8007b66:	4613      	mov	r3, r2
 8007b68:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b6a:	88bb      	ldrh	r3, [r7, #4]
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b7a:	88fa      	ldrh	r2, [r7, #6]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b84:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8a:	e018      	b.n	8007bbe <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	3302      	adds	r3, #2
 8007b98:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	0a1b      	lsrs	r3, r3, #8
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e3      	bne.n	8007b8c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007bc4:	88bb      	ldrh	r3, [r7, #4]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d007      	beq.n	8007be0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	701a      	strb	r2, [r3, #0]
  }
}
 8007be0:	bf00      	nop
 8007be2:	372c      	adds	r7, #44	; 0x2c
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bfc:	f002 f99c 	bl	8009f38 <USBD_static_malloc>
 8007c00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d105      	bne.n	8007c14 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c10:	2302      	movs	r3, #2
 8007c12:	e066      	b.n	8007ce2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7c1b      	ldrb	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d119      	bne.n	8007c58 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c28:	2202      	movs	r2, #2
 8007c2a:	2181      	movs	r1, #129	; 0x81
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 ff85 	bl	8009b3c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	2101      	movs	r1, #1
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 ff7b 	bl	8009b3c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2210      	movs	r2, #16
 8007c52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c56:	e016      	b.n	8007c86 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	2181      	movs	r1, #129	; 0x81
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 ff6c 	bl	8009b3c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	2101      	movs	r1, #1
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 ff63 	bl	8009b3c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2210      	movs	r2, #16
 8007c82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c86:	2308      	movs	r3, #8
 8007c88:	2203      	movs	r2, #3
 8007c8a:	2182      	movs	r1, #130	; 0x82
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 ff55 	bl	8009b3c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7c1b      	ldrb	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d109      	bne.n	8007cd0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f002 f8b3 	bl	8009e34 <USBD_LL_PrepareReceive>
 8007cce:	e007      	b.n	8007ce0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd6:	2340      	movs	r3, #64	; 0x40
 8007cd8:	2101      	movs	r1, #1
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f002 f8aa 	bl	8009e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007cf6:	2181      	movs	r1, #129	; 0x81
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 ff5d 	bl	8009bb8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d04:	2101      	movs	r1, #1
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 ff56 	bl	8009bb8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d14:	2182      	movs	r1, #130	; 0x82
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 ff4e 	bl	8009bb8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00e      	beq.n	8007d54 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d46:	4618      	mov	r0, r3
 8007d48:	f002 f904 	bl	8009f54 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e0af      	b.n	8007ee8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d03f      	beq.n	8007e14 <USBD_CDC_Setup+0xb4>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	f040 809f 	bne.w	8007ed8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	88db      	ldrh	r3, [r3, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02e      	beq.n	8007e00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da16      	bge.n	8007dda <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007db8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	88d2      	ldrh	r2, [r2, #6]
 8007dbe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	88db      	ldrh	r3, [r3, #6]
 8007dc4:	2b07      	cmp	r3, #7
 8007dc6:	bf28      	it	cs
 8007dc8:	2307      	movcs	r3, #7
 8007dca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	89fa      	ldrh	r2, [r7, #14]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fa9f 	bl	8009316 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007dd8:	e085      	b.n	8007ee6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	785a      	ldrb	r2, [r3, #1]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	88db      	ldrh	r3, [r3, #6]
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007df0:	6939      	ldr	r1, [r7, #16]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	88db      	ldrh	r3, [r3, #6]
 8007df6:	461a      	mov	r2, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 fab8 	bl	800936e <USBD_CtlPrepareRx>
      break;
 8007dfe:	e072      	b.n	8007ee6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	7850      	ldrb	r0, [r2, #1]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	4798      	blx	r3
      break;
 8007e12:	e068      	b.n	8007ee6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b0b      	cmp	r3, #11
 8007e1a:	d852      	bhi.n	8007ec2 <USBD_CDC_Setup+0x162>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <USBD_CDC_Setup+0xc4>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e55 	.word	0x08007e55
 8007e28:	08007ed1 	.word	0x08007ed1
 8007e2c:	08007ec3 	.word	0x08007ec3
 8007e30:	08007ec3 	.word	0x08007ec3
 8007e34:	08007ec3 	.word	0x08007ec3
 8007e38:	08007ec3 	.word	0x08007ec3
 8007e3c:	08007ec3 	.word	0x08007ec3
 8007e40:	08007ec3 	.word	0x08007ec3
 8007e44:	08007ec3 	.word	0x08007ec3
 8007e48:	08007ec3 	.word	0x08007ec3
 8007e4c:	08007e7f 	.word	0x08007e7f
 8007e50:	08007ea9 	.word	0x08007ea9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d107      	bne.n	8007e70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e60:	f107 030a 	add.w	r3, r7, #10
 8007e64:	2202      	movs	r2, #2
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fa54 	bl	8009316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e6e:	e032      	b.n	8007ed6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 f9de 	bl	8009234 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7c:	e02b      	b.n	8007ed6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d107      	bne.n	8007e9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e8a:	f107 030d 	add.w	r3, r7, #13
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fa3f 	bl	8009316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e98:	e01d      	b.n	8007ed6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 f9c9 	bl	8009234 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea6:	e016      	b.n	8007ed6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d00f      	beq.n	8007ed4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f9bc 	bl	8009234 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ec0:	e008      	b.n	8007ed4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f9b5 	bl	8009234 <USBD_CtlError>
          ret = USBD_FAIL;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8007ece:	e002      	b.n	8007ed6 <USBD_CDC_Setup+0x176>
          break;
 8007ed0:	bf00      	nop
 8007ed2:	e008      	b.n	8007ee6 <USBD_CDC_Setup+0x186>
          break;
 8007ed4:	bf00      	nop
      }
      break;
 8007ed6:	e006      	b.n	8007ee6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f001 f9aa 	bl	8009234 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e04f      	b.n	8007fb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f1a:	78fa      	ldrb	r2, [r7, #3]
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	440b      	add	r3, r1
 8007f28:	3318      	adds	r3, #24
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d029      	beq.n	8007f84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	3318      	adds	r3, #24
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	78f9      	ldrb	r1, [r7, #3]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	460b      	mov	r3, r1
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	4403      	add	r3, r0
 8007f50:	333c      	adds	r3, #60	; 0x3c
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d110      	bne.n	8007f84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	3318      	adds	r3, #24
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f76:	78f9      	ldrb	r1, [r7, #3]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 ff21 	bl	8009dc4 <USBD_LL_Transmit>
 8007f82:	e015      	b.n	8007fb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e015      	b.n	8008008 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 ff5f 	bl	8009ea4 <USBD_LL_GetRxDataSize>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008002:	4611      	mov	r1, r2
 8008004:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800801e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008026:	2303      	movs	r3, #3
 8008028:	e01b      	b.n	8008062 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d015      	beq.n	8008060 <USBD_CDC_EP0_RxReady+0x50>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800803a:	2bff      	cmp	r3, #255	; 0xff
 800803c:	d010      	beq.n	8008060 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800804c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008054:	b292      	uxth	r2, r2
 8008056:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	22ff      	movs	r2, #255	; 0xff
 800805c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2243      	movs	r2, #67	; 0x43
 8008078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	20000094 	.word	0x20000094

0800808c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2243      	movs	r2, #67	; 0x43
 8008098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20000050 	.word	0x20000050

080080ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2243      	movs	r2, #67	; 0x43
 80080b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80080ba:	4b03      	ldr	r3, [pc, #12]	; (80080c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	200000d8 	.word	0x200000d8

080080cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	220a      	movs	r2, #10
 80080d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	2000000c 	.word	0x2000000c

080080ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e004      	b.n	800810a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008116:	b480      	push	{r7}
 8008118:	b087      	sub	sp, #28
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008128:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	e008      	b.n	8008146 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008162:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800816a:	2303      	movs	r3, #3
 800816c:	e004      	b.n	8008178 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008192:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800819e:	2303      	movs	r3, #3
 80081a0:	e016      	b.n	80081d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	7c1b      	ldrb	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b4:	2101      	movs	r1, #1
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fe3c 	bl	8009e34 <USBD_LL_PrepareReceive>
 80081bc:	e007      	b.n	80081ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081c4:	2340      	movs	r3, #64	; 0x40
 80081c6:	2101      	movs	r1, #1
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 fe33 	bl	8009e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e01f      	b.n	8008230 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	79fa      	ldrb	r2, [r7, #7]
 8008222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f001 fbf5 	bl	8009a14 <USBD_LL_Init>
 800822a:	4603      	mov	r3, r0
 800822c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	e016      	b.n	800827e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	f107 020e 	add.w	r2, r7, #14
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	4602      	mov	r2, r0
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fc22 	bl	8009ad8 <USBD_LL_Start>
 8008294:	4603      	mov	r3, r0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082c0:	2303      	movs	r3, #3
 80082c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	4611      	mov	r1, r2
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4798      	blx	r3
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	4611      	mov	r1, r2
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
  }

  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 ff46 	bl	80091c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008342:	461a      	mov	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008350:	f003 031f 	and.w	r3, r3, #31
 8008354:	2b02      	cmp	r3, #2
 8008356:	d01a      	beq.n	800838e <USBD_LL_SetupStage+0x72>
 8008358:	2b02      	cmp	r3, #2
 800835a:	d822      	bhi.n	80083a2 <USBD_LL_SetupStage+0x86>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <USBD_LL_SetupStage+0x4a>
 8008360:	2b01      	cmp	r3, #1
 8008362:	d00a      	beq.n	800837a <USBD_LL_SetupStage+0x5e>
 8008364:	e01d      	b.n	80083a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9ee 	bl	8008750 <USBD_StdDevReq>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
      break;
 8008378:	e020      	b.n	80083bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa52 	bl	800882c <USBD_StdItfReq>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
      break;
 800838c:	e016      	b.n	80083bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa91 	bl	80088be <USBD_StdEPReq>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
      break;
 80083a0:	e00c      	b.n	80083bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fc37 	bl	8009c24 <USBD_LL_StallEP>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ba:	bf00      	nop
  }

  return ret;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b086      	sub	sp, #24
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	460b      	mov	r3, r1
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d138      	bne.n	800844c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d14a      	bne.n	8008482 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d913      	bls.n	8008420 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	4293      	cmp	r3, r2
 8008410:	bf28      	it	cs
 8008412:	4613      	movcs	r3, r2
 8008414:	461a      	mov	r2, r3
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 ffc5 	bl	80093a8 <USBD_CtlContinueRx>
 800841e:	e030      	b.n	8008482 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b03      	cmp	r3, #3
 800842a:	d10b      	bne.n	8008444 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 ffc0 	bl	80093ca <USBD_CtlSendStatus>
 800844a:	e01a      	b.n	8008482 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b03      	cmp	r3, #3
 8008456:	d114      	bne.n	8008482 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00e      	beq.n	8008482 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	7afa      	ldrb	r2, [r7, #11]
 800846e:	4611      	mov	r1, r2
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	4798      	blx	r3
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	e000      	b.n	8008484 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	460b      	mov	r3, r1
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d16b      	bne.n	8008578 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3314      	adds	r3, #20
 80084a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d156      	bne.n	800855e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d914      	bls.n	80084e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	461a      	mov	r2, r3
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 ff3a 	bl	800934c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d8:	2300      	movs	r3, #0
 80084da:	2200      	movs	r2, #0
 80084dc:	2100      	movs	r1, #0
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f001 fca8 	bl	8009e34 <USBD_LL_PrepareReceive>
 80084e4:	e03b      	b.n	800855e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d11c      	bne.n	800852c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d316      	bcc.n	800852c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008508:	429a      	cmp	r2, r3
 800850a:	d20f      	bcs.n	800852c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800850c:	2200      	movs	r2, #0
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 ff1b 	bl	800934c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800851e:	2300      	movs	r3, #0
 8008520:	2200      	movs	r2, #0
 8008522:	2100      	movs	r1, #0
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f001 fc85 	bl	8009e34 <USBD_LL_PrepareReceive>
 800852a:	e018      	b.n	800855e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b03      	cmp	r3, #3
 8008536:	d10b      	bne.n	8008550 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f001 fb66 	bl	8009c24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 ff49 	bl	80093f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008564:	2b01      	cmp	r3, #1
 8008566:	d122      	bne.n	80085ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff fe98 	bl	800829e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008576:	e01a      	b.n	80085ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b03      	cmp	r3, #3
 8008582:	d114      	bne.n	80085ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00e      	beq.n	80085ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	7afa      	ldrb	r2, [r7, #11]
 800859a:	4611      	mov	r1, r2
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	e000      	b.n	80085b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e02f      	b.n	800864c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00f      	beq.n	8008616 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6852      	ldr	r2, [r2, #4]
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	4611      	mov	r1, r2
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008616:	2340      	movs	r3, #64	; 0x40
 8008618:	2200      	movs	r2, #0
 800861a:	2100      	movs	r1, #0
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 fa8d 	bl	8009b3c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2240      	movs	r2, #64	; 0x40
 800862e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	2200      	movs	r2, #0
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fa7f 	bl	8009b3c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008682:	b2da      	uxtb	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2204      	movs	r2, #4
 800868e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d106      	bne.n	80086c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e012      	b.n	800870c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d10b      	bne.n	800870a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	3301      	adds	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008732:	8a3b      	ldrh	r3, [r7, #16]
 8008734:	021b      	lsls	r3, r3, #8
 8008736:	b21a      	sxth	r2, r3
 8008738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800873c:	4313      	orrs	r3, r2
 800873e:	b21b      	sxth	r3, r3
 8008740:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008742:	89fb      	ldrh	r3, [r7, #14]
}
 8008744:	4618      	mov	r0, r3
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d005      	beq.n	8008776 <USBD_StdDevReq+0x26>
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d853      	bhi.n	8008816 <USBD_StdDevReq+0xc6>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <USBD_StdDevReq+0x3a>
 8008772:	2b20      	cmp	r3, #32
 8008774:	d14f      	bne.n	8008816 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
      break;
 8008788:	e04a      	b.n	8008820 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b09      	cmp	r3, #9
 8008790:	d83b      	bhi.n	800880a <USBD_StdDevReq+0xba>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USBD_StdDevReq+0x48>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087ed 	.word	0x080087ed
 800879c:	08008801 	.word	0x08008801
 80087a0:	0800880b 	.word	0x0800880b
 80087a4:	080087f7 	.word	0x080087f7
 80087a8:	0800880b 	.word	0x0800880b
 80087ac:	080087cb 	.word	0x080087cb
 80087b0:	080087c1 	.word	0x080087c1
 80087b4:	0800880b 	.word	0x0800880b
 80087b8:	080087e3 	.word	0x080087e3
 80087bc:	080087d5 	.word	0x080087d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9de 	bl	8008b84 <USBD_GetDescriptor>
          break;
 80087c8:	e024      	b.n	8008814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fb6d 	bl	8008eac <USBD_SetAddress>
          break;
 80087d2:	e01f      	b.n	8008814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fbac 	bl	8008f34 <USBD_SetConfig>
 80087dc:	4603      	mov	r3, r0
 80087de:	73fb      	strb	r3, [r7, #15]
          break;
 80087e0:	e018      	b.n	8008814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fc4b 	bl	8009080 <USBD_GetConfig>
          break;
 80087ea:	e013      	b.n	8008814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc7c 	bl	80090ec <USBD_GetStatus>
          break;
 80087f4:	e00e      	b.n	8008814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fcab 	bl	8009154 <USBD_SetFeature>
          break;
 80087fe:	e009      	b.n	8008814 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fcba 	bl	800917c <USBD_ClrFeature>
          break;
 8008808:	e004      	b.n	8008814 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fd11 	bl	8009234 <USBD_CtlError>
          break;
 8008812:	bf00      	nop
      }
      break;
 8008814:	e004      	b.n	8008820 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fd0b 	bl	8009234 <USBD_CtlError>
      break;
 800881e:	bf00      	nop
  }

  return ret;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008842:	2b40      	cmp	r3, #64	; 0x40
 8008844:	d005      	beq.n	8008852 <USBD_StdItfReq+0x26>
 8008846:	2b40      	cmp	r3, #64	; 0x40
 8008848:	d82f      	bhi.n	80088aa <USBD_StdItfReq+0x7e>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <USBD_StdItfReq+0x26>
 800884e:	2b20      	cmp	r3, #32
 8008850:	d12b      	bne.n	80088aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	2b02      	cmp	r3, #2
 800885e:	d81d      	bhi.n	800889c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	889b      	ldrh	r3, [r3, #4]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b01      	cmp	r3, #1
 8008868:	d813      	bhi.n	8008892 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	88db      	ldrh	r3, [r3, #6]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d110      	bne.n	80088a6 <USBD_StdItfReq+0x7a>
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10d      	bne.n	80088a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fd9d 	bl	80093ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008890:	e009      	b.n	80088a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fccd 	bl	8009234 <USBD_CtlError>
          break;
 800889a:	e004      	b.n	80088a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fcc8 	bl	8009234 <USBD_CtlError>
          break;
 80088a4:	e000      	b.n	80088a8 <USBD_StdItfReq+0x7c>
          break;
 80088a6:	bf00      	nop
      }
      break;
 80088a8:	e004      	b.n	80088b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fcc1 	bl	8009234 <USBD_CtlError>
      break;
 80088b2:	bf00      	nop
  }

  return ret;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	889b      	ldrh	r3, [r3, #4]
 80088d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d007      	beq.n	80088ee <USBD_StdEPReq+0x30>
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	f200 8145 	bhi.w	8008b6e <USBD_StdEPReq+0x2b0>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00c      	beq.n	8008902 <USBD_StdEPReq+0x44>
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	f040 8140 	bne.w	8008b6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	4798      	blx	r3
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008900:	e13a      	b.n	8008b78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b03      	cmp	r3, #3
 8008908:	d007      	beq.n	800891a <USBD_StdEPReq+0x5c>
 800890a:	2b03      	cmp	r3, #3
 800890c:	f300 8129 	bgt.w	8008b62 <USBD_StdEPReq+0x2a4>
 8008910:	2b00      	cmp	r3, #0
 8008912:	d07f      	beq.n	8008a14 <USBD_StdEPReq+0x156>
 8008914:	2b01      	cmp	r3, #1
 8008916:	d03c      	beq.n	8008992 <USBD_StdEPReq+0xd4>
 8008918:	e123      	b.n	8008b62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d002      	beq.n	800892c <USBD_StdEPReq+0x6e>
 8008926:	2b03      	cmp	r3, #3
 8008928:	d016      	beq.n	8008958 <USBD_StdEPReq+0x9a>
 800892a:	e02c      	b.n	8008986 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00d      	beq.n	800894e <USBD_StdEPReq+0x90>
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b80      	cmp	r3, #128	; 0x80
 8008936:	d00a      	beq.n	800894e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 f971 	bl	8009c24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 f96d 	bl	8009c24 <USBD_LL_StallEP>
 800894a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800894c:	e020      	b.n	8008990 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fc6f 	bl	8009234 <USBD_CtlError>
              break;
 8008956:	e01b      	b.n	8008990 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	885b      	ldrh	r3, [r3, #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10e      	bne.n	800897e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00b      	beq.n	800897e <USBD_StdEPReq+0xc0>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d008      	beq.n	800897e <USBD_StdEPReq+0xc0>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	88db      	ldrh	r3, [r3, #6]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 f953 	bl	8009c24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fd23 	bl	80093ca <USBD_CtlSendStatus>

              break;
 8008984:	e004      	b.n	8008990 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fc53 	bl	8009234 <USBD_CtlError>
              break;
 800898e:	bf00      	nop
          }
          break;
 8008990:	e0ec      	b.n	8008b6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d002      	beq.n	80089a4 <USBD_StdEPReq+0xe6>
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d016      	beq.n	80089d0 <USBD_StdEPReq+0x112>
 80089a2:	e030      	b.n	8008a06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <USBD_StdEPReq+0x108>
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b80      	cmp	r3, #128	; 0x80
 80089ae:	d00a      	beq.n	80089c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f935 	bl	8009c24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f931 	bl	8009c24 <USBD_LL_StallEP>
 80089c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089c4:	e025      	b.n	8008a12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc33 	bl	8009234 <USBD_CtlError>
              break;
 80089ce:	e020      	b.n	8008a12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	885b      	ldrh	r3, [r3, #2]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d11b      	bne.n	8008a10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 f952 	bl	8009c90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fcec 	bl	80093ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008a04:	e004      	b.n	8008a10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fc13 	bl	8009234 <USBD_CtlError>
              break;
 8008a0e:	e000      	b.n	8008a12 <USBD_StdEPReq+0x154>
              break;
 8008a10:	bf00      	nop
          }
          break;
 8008a12:	e0ab      	b.n	8008b6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d002      	beq.n	8008a26 <USBD_StdEPReq+0x168>
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d032      	beq.n	8008a8a <USBD_StdEPReq+0x1cc>
 8008a24:	e097      	b.n	8008b56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <USBD_StdEPReq+0x17e>
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2b80      	cmp	r3, #128	; 0x80
 8008a30:	d004      	beq.n	8008a3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fbfd 	bl	8009234 <USBD_CtlError>
                break;
 8008a3a:	e091      	b.n	8008b60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	da0b      	bge.n	8008a5c <USBD_StdEPReq+0x19e>
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	3310      	adds	r3, #16
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4413      	add	r3, r2
 8008a58:	3304      	adds	r3, #4
 8008a5a:	e00b      	b.n	8008a74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4413      	add	r3, r2
 8008a72:	3304      	adds	r3, #4
 8008a74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc47 	bl	8009316 <USBD_CtlSendData>
              break;
 8008a88:	e06a      	b.n	8008b60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	da11      	bge.n	8008ab6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	f003 020f 	and.w	r2, r3, #15
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	3324      	adds	r3, #36	; 0x24
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d117      	bne.n	8008adc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fbc0 	bl	8009234 <USBD_CtlError>
                  break;
 8008ab4:	e054      	b.n	8008b60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	f003 020f 	and.w	r2, r3, #15
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d104      	bne.n	8008adc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fbad 	bl	8009234 <USBD_CtlError>
                  break;
 8008ada:	e041      	b.n	8008b60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	da0b      	bge.n	8008afc <USBD_StdEPReq+0x23e>
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	3310      	adds	r3, #16
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	4413      	add	r3, r2
 8008af8:	3304      	adds	r3, #4
 8008afa:	e00b      	b.n	8008b14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	4413      	add	r3, r2
 8008b12:	3304      	adds	r3, #4
 8008b14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <USBD_StdEPReq+0x264>
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b80      	cmp	r3, #128	; 0x80
 8008b20:	d103      	bne.n	8008b2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e00e      	b.n	8008b48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 f8e4 	bl	8009cfc <USBD_LL_IsStallEP>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	e002      	b.n	8008b48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fbe1 	bl	8009316 <USBD_CtlSendData>
              break;
 8008b54:	e004      	b.n	8008b60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fb6b 	bl	8009234 <USBD_CtlError>
              break;
 8008b5e:	bf00      	nop
          }
          break;
 8008b60:	e004      	b.n	8008b6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fb65 	bl	8009234 <USBD_CtlError>
          break;
 8008b6a:	bf00      	nop
      }
      break;
 8008b6c:	e004      	b.n	8008b78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fb5f 	bl	8009234 <USBD_CtlError>
      break;
 8008b76:	bf00      	nop
  }

  return ret;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	885b      	ldrh	r3, [r3, #2]
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	2b0e      	cmp	r3, #14
 8008ba6:	f200 8152 	bhi.w	8008e4e <USBD_GetDescriptor+0x2ca>
 8008baa:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <USBD_GetDescriptor+0x2c>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008c21 	.word	0x08008c21
 8008bb4:	08008c39 	.word	0x08008c39
 8008bb8:	08008c79 	.word	0x08008c79
 8008bbc:	08008e4f 	.word	0x08008e4f
 8008bc0:	08008e4f 	.word	0x08008e4f
 8008bc4:	08008def 	.word	0x08008def
 8008bc8:	08008e1b 	.word	0x08008e1b
 8008bcc:	08008e4f 	.word	0x08008e4f
 8008bd0:	08008e4f 	.word	0x08008e4f
 8008bd4:	08008e4f 	.word	0x08008e4f
 8008bd8:	08008e4f 	.word	0x08008e4f
 8008bdc:	08008e4f 	.word	0x08008e4f
 8008be0:	08008e4f 	.word	0x08008e4f
 8008be4:	08008e4f 	.word	0x08008e4f
 8008be8:	08008bed 	.word	0x08008bed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7c12      	ldrb	r2, [r2, #16]
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c0e:	e126      	b.n	8008e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fb0e 	bl	8009234 <USBD_CtlError>
        err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c1e:	e11e      	b.n	8008e5e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	7c12      	ldrb	r2, [r2, #16]
 8008c2c:	f107 0108 	add.w	r1, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
      break;
 8008c36:	e112      	b.n	8008e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	7c1b      	ldrb	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10d      	bne.n	8008c5c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c48:	f107 0208 	add.w	r2, r7, #8
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	2202      	movs	r2, #2
 8008c58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c5a:	e100      	b.n	8008e5e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	f107 0208 	add.w	r2, r7, #8
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3301      	adds	r3, #1
 8008c72:	2202      	movs	r2, #2
 8008c74:	701a      	strb	r2, [r3, #0]
      break;
 8008c76:	e0f2      	b.n	8008e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	f200 80ac 	bhi.w	8008ddc <USBD_GetDescriptor+0x258>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <USBD_GetDescriptor+0x108>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008cd9 	.word	0x08008cd9
 8008c94:	08008d0d 	.word	0x08008d0d
 8008c98:	08008d41 	.word	0x08008d41
 8008c9c:	08008d75 	.word	0x08008d75
 8008ca0:	08008da9 	.word	0x08008da9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	7c12      	ldrb	r2, [r2, #16]
 8008cbc:	f107 0108 	add.w	r1, r7, #8
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc6:	e091      	b.n	8008dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fab2 	bl	8009234 <USBD_CtlError>
            err++;
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd6:	e089      	b.n	8008dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7c12      	ldrb	r2, [r2, #16]
 8008cf0:	f107 0108 	add.w	r1, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfa:	e077      	b.n	8008dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fa98 	bl	8009234 <USBD_CtlError>
            err++;
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	3301      	adds	r3, #1
 8008d08:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0a:	e06f      	b.n	8008dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	7c12      	ldrb	r2, [r2, #16]
 8008d24:	f107 0108 	add.w	r1, r7, #8
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4798      	blx	r3
 8008d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2e:	e05d      	b.n	8008dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa7e 	bl	8009234 <USBD_CtlError>
            err++;
 8008d38:	7afb      	ldrb	r3, [r7, #11]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3e:	e055      	b.n	8008dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7c12      	ldrb	r2, [r2, #16]
 8008d58:	f107 0108 	add.w	r1, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d62:	e043      	b.n	8008dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa64 	bl	8009234 <USBD_CtlError>
            err++;
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	72fb      	strb	r3, [r7, #11]
          break;
 8008d72:	e03b      	b.n	8008dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	7c12      	ldrb	r2, [r2, #16]
 8008d8c:	f107 0108 	add.w	r1, r7, #8
 8008d90:	4610      	mov	r0, r2
 8008d92:	4798      	blx	r3
 8008d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d96:	e029      	b.n	8008dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa4a 	bl	8009234 <USBD_CtlError>
            err++;
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	3301      	adds	r3, #1
 8008da4:	72fb      	strb	r3, [r7, #11]
          break;
 8008da6:	e021      	b.n	8008dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	7c12      	ldrb	r2, [r2, #16]
 8008dc0:	f107 0108 	add.w	r1, r7, #8
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	4798      	blx	r3
 8008dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dca:	e00f      	b.n	8008dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa30 	bl	8009234 <USBD_CtlError>
            err++;
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dda:	e007      	b.n	8008dec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa28 	bl	8009234 <USBD_CtlError>
          err++;
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	3301      	adds	r3, #1
 8008de8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008dea:	bf00      	nop
      }
      break;
 8008dec:	e037      	b.n	8008e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7c1b      	ldrb	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfe:	f107 0208 	add.w	r2, r7, #8
 8008e02:	4610      	mov	r0, r2
 8008e04:	4798      	blx	r3
 8008e06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e08:	e029      	b.n	8008e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fa11 	bl	8009234 <USBD_CtlError>
        err++;
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	3301      	adds	r3, #1
 8008e16:	72fb      	strb	r3, [r7, #11]
      break;
 8008e18:	e021      	b.n	8008e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7c1b      	ldrb	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10d      	bne.n	8008e3e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	f107 0208 	add.w	r2, r7, #8
 8008e2e:	4610      	mov	r0, r2
 8008e30:	4798      	blx	r3
 8008e32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	2207      	movs	r2, #7
 8008e3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e3c:	e00f      	b.n	8008e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f9f7 	bl	8009234 <USBD_CtlError>
        err++;
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e4c:	e007      	b.n	8008e5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f9ef 	bl	8009234 <USBD_CtlError>
      err++;
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e5c:	bf00      	nop
  }

  if (err != 0U)
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d11e      	bne.n	8008ea2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	88db      	ldrh	r3, [r3, #6]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d016      	beq.n	8008e9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008e6c:	893b      	ldrh	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00e      	beq.n	8008e90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	88da      	ldrh	r2, [r3, #6]
 8008e76:	893b      	ldrh	r3, [r7, #8]
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	bf28      	it	cs
 8008e7c:	4613      	movcs	r3, r2
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e82:	893b      	ldrh	r3, [r7, #8]
 8008e84:	461a      	mov	r2, r3
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa44 	bl	8009316 <USBD_CtlSendData>
 8008e8e:	e009      	b.n	8008ea4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f9ce 	bl	8009234 <USBD_CtlError>
 8008e98:	e004      	b.n	8008ea4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa95 	bl	80093ca <USBD_CtlSendStatus>
 8008ea0:	e000      	b.n	8008ea4 <USBD_GetDescriptor+0x320>
    return;
 8008ea2:	bf00      	nop
  }
}
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop

08008eac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	889b      	ldrh	r3, [r3, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d131      	bne.n	8008f22 <USBD_SetAddress+0x76>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	88db      	ldrh	r3, [r3, #6]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d12d      	bne.n	8008f22 <USBD_SetAddress+0x76>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	885b      	ldrh	r3, [r3, #2]
 8008eca:	2b7f      	cmp	r3, #127	; 0x7f
 8008ecc:	d829      	bhi.n	8008f22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	885b      	ldrh	r3, [r3, #2]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d104      	bne.n	8008ef0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f9a3 	bl	8009234 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eee:	e01d      	b.n	8008f2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7bfa      	ldrb	r2, [r7, #15]
 8008ef4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 ff2b 	bl	8009d58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa61 	bl	80093ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d004      	beq.n	8008f18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f16:	e009      	b.n	8008f2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f20:	e004      	b.n	8008f2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f985 	bl	8009234 <USBD_CtlError>
  }
}
 8008f2a:	bf00      	nop
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	4b4c      	ldr	r3, [pc, #304]	; (800907c <USBD_SetConfig+0x148>)
 8008f4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f4c:	4b4b      	ldr	r3, [pc, #300]	; (800907c <USBD_SetConfig+0x148>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d905      	bls.n	8008f60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f96c 	bl	8009234 <USBD_CtlError>
    return USBD_FAIL;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e088      	b.n	8009072 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d002      	beq.n	8008f72 <USBD_SetConfig+0x3e>
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d025      	beq.n	8008fbc <USBD_SetConfig+0x88>
 8008f70:	e071      	b.n	8009056 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f72:	4b42      	ldr	r3, [pc, #264]	; (800907c <USBD_SetConfig+0x148>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01c      	beq.n	8008fb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f7a:	4b40      	ldr	r3, [pc, #256]	; (800907c <USBD_SetConfig+0x148>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f84:	4b3d      	ldr	r3, [pc, #244]	; (800907c <USBD_SetConfig+0x148>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff f992 	bl	80082b4 <USBD_SetClassConfig>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f949 	bl	8009234 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fa2:	e065      	b.n	8009070 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa10 	bl	80093ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2203      	movs	r2, #3
 8008fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fb2:	e05d      	b.n	8009070 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa08 	bl	80093ca <USBD_CtlSendStatus>
      break;
 8008fba:	e059      	b.n	8009070 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008fbc:	4b2f      	ldr	r3, [pc, #188]	; (800907c <USBD_SetConfig+0x148>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d112      	bne.n	8008fea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008fcc:	4b2b      	ldr	r3, [pc, #172]	; (800907c <USBD_SetConfig+0x148>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fd6:	4b29      	ldr	r3, [pc, #164]	; (800907c <USBD_SetConfig+0x148>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff f985 	bl	80082ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f9f1 	bl	80093ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fe8:	e042      	b.n	8009070 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008fea:	4b24      	ldr	r3, [pc, #144]	; (800907c <USBD_SetConfig+0x148>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d02a      	beq.n	800904e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff f973 	bl	80082ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009006:	4b1d      	ldr	r3, [pc, #116]	; (800907c <USBD_SetConfig+0x148>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009010:	4b1a      	ldr	r3, [pc, #104]	; (800907c <USBD_SetConfig+0x148>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff f94c 	bl	80082b4 <USBD_SetClassConfig>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00f      	beq.n	8009046 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f903 	bl	8009234 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff f958 	bl	80082ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009044:	e014      	b.n	8009070 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f9bf 	bl	80093ca <USBD_CtlSendStatus>
      break;
 800904c:	e010      	b.n	8009070 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f9bb 	bl	80093ca <USBD_CtlSendStatus>
      break;
 8009054:	e00c      	b.n	8009070 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f8eb 	bl	8009234 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800905e:	4b07      	ldr	r3, [pc, #28]	; (800907c <USBD_SetConfig+0x148>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff f941 	bl	80082ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	73fb      	strb	r3, [r7, #15]
      break;
 800906e:	bf00      	nop
  }

  return ret;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	200002b4 	.word	0x200002b4

08009080 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	88db      	ldrh	r3, [r3, #6]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d004      	beq.n	800909c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f8cd 	bl	8009234 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800909a:	e023      	b.n	80090e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	dc02      	bgt.n	80090ae <USBD_GetConfig+0x2e>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dc03      	bgt.n	80090b4 <USBD_GetConfig+0x34>
 80090ac:	e015      	b.n	80090da <USBD_GetConfig+0x5a>
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d00b      	beq.n	80090ca <USBD_GetConfig+0x4a>
 80090b2:	e012      	b.n	80090da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3308      	adds	r3, #8
 80090be:	2201      	movs	r2, #1
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f927 	bl	8009316 <USBD_CtlSendData>
        break;
 80090c8:	e00c      	b.n	80090e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	2201      	movs	r2, #1
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f91f 	bl	8009316 <USBD_CtlSendData>
        break;
 80090d8:	e004      	b.n	80090e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8a9 	bl	8009234 <USBD_CtlError>
        break;
 80090e2:	bf00      	nop
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	2b02      	cmp	r3, #2
 8009102:	d81e      	bhi.n	8009142 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	88db      	ldrh	r3, [r3, #6]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d004      	beq.n	8009116 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f890 	bl	8009234 <USBD_CtlError>
        break;
 8009114:	e01a      	b.n	800914c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009122:	2b00      	cmp	r3, #0
 8009124:	d005      	beq.n	8009132 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	f043 0202 	orr.w	r2, r3, #2
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	330c      	adds	r3, #12
 8009136:	2202      	movs	r2, #2
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8eb 	bl	8009316 <USBD_CtlSendData>
      break;
 8009140:	e004      	b.n	800914c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f875 	bl	8009234 <USBD_CtlError>
      break;
 800914a:	bf00      	nop
  }
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	885b      	ldrh	r3, [r3, #2]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d106      	bne.n	8009174 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f92b 	bl	80093ca <USBD_CtlSendStatus>
  }
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918c:	b2db      	uxtb	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	2b02      	cmp	r3, #2
 8009192:	d80b      	bhi.n	80091ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	885b      	ldrh	r3, [r3, #2]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d10c      	bne.n	80091b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f910 	bl	80093ca <USBD_CtlSendStatus>
      }
      break;
 80091aa:	e004      	b.n	80091b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f840 	bl	8009234 <USBD_CtlError>
      break;
 80091b4:	e000      	b.n	80091b8 <USBD_ClrFeature+0x3c>
      break;
 80091b6:	bf00      	nop
  }
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	781a      	ldrb	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f7ff fa92 	bl	8008714 <SWAPBYTE>
 80091f0:	4603      	mov	r3, r0
 80091f2:	461a      	mov	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3301      	adds	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff fa85 	bl	8008714 <SWAPBYTE>
 800920a:	4603      	mov	r3, r0
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff fa78 	bl	8008714 <SWAPBYTE>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	80da      	strh	r2, [r3, #6]
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800923e:	2180      	movs	r1, #128	; 0x80
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fcef 	bl	8009c24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009246:	2100      	movs	r1, #0
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fceb 	bl	8009c24 <USBD_LL_StallEP>
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d036      	beq.n	80092da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009270:	6938      	ldr	r0, [r7, #16]
 8009272:	f000 f836 	bl	80092e2 <USBD_GetLen>
 8009276:	4603      	mov	r3, r0
 8009278:	3301      	adds	r3, #1
 800927a:	b29b      	uxth	r3, r3
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4413      	add	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	7812      	ldrb	r2, [r2, #0]
 800928e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	3301      	adds	r3, #1
 8009294:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	4413      	add	r3, r2
 800929c:	2203      	movs	r2, #3
 800929e:	701a      	strb	r2, [r3, #0]
  idx++;
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	3301      	adds	r3, #1
 80092a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092a6:	e013      	b.n	80092d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	7812      	ldrb	r2, [r2, #0]
 80092b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	3301      	adds	r3, #1
 80092b8:	613b      	str	r3, [r7, #16]
    idx++;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	3301      	adds	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	4413      	add	r3, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	3301      	adds	r3, #1
 80092ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e7      	bne.n	80092a8 <USBD_GetString+0x52>
 80092d8:	e000      	b.n	80092dc <USBD_GetString+0x86>
    return;
 80092da:	bf00      	nop
  }
}
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092f2:	e005      	b.n	8009300 <USBD_GetLen+0x1e>
  {
    len++;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	3301      	adds	r3, #1
 80092f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3301      	adds	r3, #1
 80092fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1f5      	bne.n	80092f4 <USBD_GetLen+0x12>
  }

  return len;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2202      	movs	r2, #2
 8009326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	2100      	movs	r1, #0
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fd41 	bl	8009dc4 <USBD_LL_Transmit>

  return USBD_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	2100      	movs	r1, #0
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 fd30 	bl	8009dc4 <USBD_LL_Transmit>

  return USBD_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2203      	movs	r2, #3
 800937e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	2100      	movs	r1, #0
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 fd4b 	bl	8009e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	2100      	movs	r1, #0
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 fd3a 	bl	8009e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b082      	sub	sp, #8
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2204      	movs	r2, #4
 80093d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093da:	2300      	movs	r3, #0
 80093dc:	2200      	movs	r2, #0
 80093de:	2100      	movs	r1, #0
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fcef 	bl	8009dc4 <USBD_LL_Transmit>

  return USBD_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2205      	movs	r2, #5
 80093fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009400:	2300      	movs	r3, #0
 8009402:	2200      	movs	r2, #0
 8009404:	2100      	movs	r1, #0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fd14 	bl	8009e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800941c:	2200      	movs	r2, #0
 800941e:	4912      	ldr	r1, [pc, #72]	; (8009468 <MX_USB_DEVICE_Init+0x50>)
 8009420:	4812      	ldr	r0, [pc, #72]	; (800946c <MX_USB_DEVICE_Init+0x54>)
 8009422:	f7fe fed9 	bl	80081d8 <USBD_Init>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800942c:	f7f7 f8b2 	bl	8000594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009430:	490f      	ldr	r1, [pc, #60]	; (8009470 <MX_USB_DEVICE_Init+0x58>)
 8009432:	480e      	ldr	r0, [pc, #56]	; (800946c <MX_USB_DEVICE_Init+0x54>)
 8009434:	f7fe ff00 	bl	8008238 <USBD_RegisterClass>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800943e:	f7f7 f8a9 	bl	8000594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009442:	490c      	ldr	r1, [pc, #48]	; (8009474 <MX_USB_DEVICE_Init+0x5c>)
 8009444:	4809      	ldr	r0, [pc, #36]	; (800946c <MX_USB_DEVICE_Init+0x54>)
 8009446:	f7fe fe51 	bl	80080ec <USBD_CDC_RegisterInterface>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009450:	f7f7 f8a0 	bl	8000594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009454:	4805      	ldr	r0, [pc, #20]	; (800946c <MX_USB_DEVICE_Init+0x54>)
 8009456:	f7fe ff16 	bl	8008286 <USBD_Start>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009460:	f7f7 f898 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009464:	bf00      	nop
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000130 	.word	0x20000130
 800946c:	200002b8 	.word	0x200002b8
 8009470:	20000018 	.word	0x20000018
 8009474:	2000011c 	.word	0x2000011c

08009478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800947c:	2200      	movs	r2, #0
 800947e:	4905      	ldr	r1, [pc, #20]	; (8009494 <CDC_Init_FS+0x1c>)
 8009480:	4805      	ldr	r0, [pc, #20]	; (8009498 <CDC_Init_FS+0x20>)
 8009482:	f7fe fe48 	bl	8008116 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009486:	4905      	ldr	r1, [pc, #20]	; (800949c <CDC_Init_FS+0x24>)
 8009488:	4803      	ldr	r0, [pc, #12]	; (8009498 <CDC_Init_FS+0x20>)
 800948a:	f7fe fe62 	bl	8008152 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800948e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009490:	4618      	mov	r0, r3
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20000988 	.word	0x20000988
 8009498:	200002b8 	.word	0x200002b8
 800949c:	20000588 	.word	0x20000588

080094a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
 80094bc:	4613      	mov	r3, r2
 80094be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b23      	cmp	r3, #35	; 0x23
 80094c4:	d84a      	bhi.n	800955c <CDC_Control_FS+0xac>
 80094c6:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <CDC_Control_FS+0x1c>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	0800955d 	.word	0x0800955d
 80094d0:	0800955d 	.word	0x0800955d
 80094d4:	0800955d 	.word	0x0800955d
 80094d8:	0800955d 	.word	0x0800955d
 80094dc:	0800955d 	.word	0x0800955d
 80094e0:	0800955d 	.word	0x0800955d
 80094e4:	0800955d 	.word	0x0800955d
 80094e8:	0800955d 	.word	0x0800955d
 80094ec:	0800955d 	.word	0x0800955d
 80094f0:	0800955d 	.word	0x0800955d
 80094f4:	0800955d 	.word	0x0800955d
 80094f8:	0800955d 	.word	0x0800955d
 80094fc:	0800955d 	.word	0x0800955d
 8009500:	0800955d 	.word	0x0800955d
 8009504:	0800955d 	.word	0x0800955d
 8009508:	0800955d 	.word	0x0800955d
 800950c:	0800955d 	.word	0x0800955d
 8009510:	0800955d 	.word	0x0800955d
 8009514:	0800955d 	.word	0x0800955d
 8009518:	0800955d 	.word	0x0800955d
 800951c:	0800955d 	.word	0x0800955d
 8009520:	0800955d 	.word	0x0800955d
 8009524:	0800955d 	.word	0x0800955d
 8009528:	0800955d 	.word	0x0800955d
 800952c:	0800955d 	.word	0x0800955d
 8009530:	0800955d 	.word	0x0800955d
 8009534:	0800955d 	.word	0x0800955d
 8009538:	0800955d 	.word	0x0800955d
 800953c:	0800955d 	.word	0x0800955d
 8009540:	0800955d 	.word	0x0800955d
 8009544:	0800955d 	.word	0x0800955d
 8009548:	0800955d 	.word	0x0800955d
 800954c:	0800955d 	.word	0x0800955d
 8009550:	0800955d 	.word	0x0800955d
 8009554:	0800955d 	.word	0x0800955d
 8009558:	0800955d 	.word	0x0800955d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800955c:	bf00      	nop
  }

  return (USBD_OK);
 800955e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4805      	ldr	r0, [pc, #20]	; (8009590 <CDC_Receive_FS+0x24>)
 800957a:	f7fe fdea 	bl	8008152 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800957e:	4804      	ldr	r0, [pc, #16]	; (8009590 <CDC_Receive_FS+0x24>)
 8009580:	f7fe fe00 	bl	8008184 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009584:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200002b8 	.word	0x200002b8

08009594 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	4613      	mov	r3, r2
 80095a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80095a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
	...

080095b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2212      	movs	r2, #18
 80095c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095ca:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20000150 	.word	0x20000150

080095dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2204      	movs	r2, #4
 80095ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095ee:	4b03      	ldr	r3, [pc, #12]	; (80095fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	20000170 	.word	0x20000170

08009600 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	4907      	ldr	r1, [pc, #28]	; (8009634 <USBD_FS_ProductStrDescriptor+0x34>)
 8009616:	4808      	ldr	r0, [pc, #32]	; (8009638 <USBD_FS_ProductStrDescriptor+0x38>)
 8009618:	f7ff fe1d 	bl	8009256 <USBD_GetString>
 800961c:	e004      	b.n	8009628 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	4904      	ldr	r1, [pc, #16]	; (8009634 <USBD_FS_ProductStrDescriptor+0x34>)
 8009622:	4805      	ldr	r0, [pc, #20]	; (8009638 <USBD_FS_ProductStrDescriptor+0x38>)
 8009624:	f7ff fe17 	bl	8009256 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009628:	4b02      	ldr	r3, [pc, #8]	; (8009634 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000d88 	.word	0x20000d88
 8009638:	08009fe4 	.word	0x08009fe4

0800963c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	4904      	ldr	r1, [pc, #16]	; (800965c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800964c:	4804      	ldr	r0, [pc, #16]	; (8009660 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800964e:	f7ff fe02 	bl	8009256 <USBD_GetString>
  return USBD_StrDesc;
 8009652:	4b02      	ldr	r3, [pc, #8]	; (800965c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20000d88 	.word	0x20000d88
 8009660:	08009ffc 	.word	0x08009ffc

08009664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	221a      	movs	r2, #26
 8009674:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009676:	f000 f855 	bl	8009724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800967a:	4b02      	ldr	r3, [pc, #8]	; (8009684 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20000174 	.word	0x20000174

08009688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4907      	ldr	r1, [pc, #28]	; (80096bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800969e:	4808      	ldr	r0, [pc, #32]	; (80096c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096a0:	f7ff fdd9 	bl	8009256 <USBD_GetString>
 80096a4:	e004      	b.n	80096b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	4904      	ldr	r1, [pc, #16]	; (80096bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80096aa:	4805      	ldr	r0, [pc, #20]	; (80096c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096ac:	f7ff fdd3 	bl	8009256 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000d88 	.word	0x20000d88
 80096c0:	0800a010 	.word	0x0800a010

080096c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096d0:	79fb      	ldrb	r3, [r7, #7]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d105      	bne.n	80096e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	4907      	ldr	r1, [pc, #28]	; (80096f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096da:	4808      	ldr	r0, [pc, #32]	; (80096fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096dc:	f7ff fdbb 	bl	8009256 <USBD_GetString>
 80096e0:	e004      	b.n	80096ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	4904      	ldr	r1, [pc, #16]	; (80096f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096e6:	4805      	ldr	r0, [pc, #20]	; (80096fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096e8:	f7ff fdb5 	bl	8009256 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096ec:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000d88 	.word	0x20000d88
 80096fc:	0800a01c 	.word	0x0800a01c

08009700 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	220c      	movs	r2, #12
 8009710:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009712:	4b03      	ldr	r3, [pc, #12]	; (8009720 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009714:	4618      	mov	r0, r3
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	20000164 	.word	0x20000164

08009724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800972a:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <Get_SerialNum+0x44>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009730:	4b0e      	ldr	r3, [pc, #56]	; (800976c <Get_SerialNum+0x48>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009736:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <Get_SerialNum+0x4c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4413      	add	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800974a:	2208      	movs	r2, #8
 800974c:	4909      	ldr	r1, [pc, #36]	; (8009774 <Get_SerialNum+0x50>)
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 f814 	bl	800977c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009754:	2204      	movs	r2, #4
 8009756:	4908      	ldr	r1, [pc, #32]	; (8009778 <Get_SerialNum+0x54>)
 8009758:	68b8      	ldr	r0, [r7, #8]
 800975a:	f000 f80f 	bl	800977c <IntToUnicode>
  }
}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	1fff7590 	.word	0x1fff7590
 800976c:	1fff7594 	.word	0x1fff7594
 8009770:	1fff7598 	.word	0x1fff7598
 8009774:	20000176 	.word	0x20000176
 8009778:	20000186 	.word	0x20000186

0800977c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	4613      	mov	r3, r2
 8009788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]
 8009792:	e027      	b.n	80097e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	0f1b      	lsrs	r3, r3, #28
 8009798:	2b09      	cmp	r3, #9
 800979a:	d80b      	bhi.n	80097b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	0f1b      	lsrs	r3, r3, #28
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	4619      	mov	r1, r3
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	440b      	add	r3, r1
 80097ac:	3230      	adds	r2, #48	; 0x30
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	e00a      	b.n	80097ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	0f1b      	lsrs	r3, r3, #28
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	4619      	mov	r1, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	440b      	add	r3, r1
 80097c4:	3237      	adds	r2, #55	; 0x37
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	3301      	adds	r3, #1
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	4413      	add	r3, r2
 80097da:	2200      	movs	r2, #0
 80097dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	3301      	adds	r3, #1
 80097e2:	75fb      	strb	r3, [r7, #23]
 80097e4:	7dfa      	ldrb	r2, [r7, #23]
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d3d3      	bcc.n	8009794 <IntToUnicode+0x18>
  }
}
 80097ec:	bf00      	nop
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
	...

080097fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b096      	sub	sp, #88	; 0x58
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009804:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	609a      	str	r2, [r3, #8]
 8009810:	60da      	str	r2, [r3, #12]
 8009812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009814:	f107 0310 	add.w	r3, r7, #16
 8009818:	2234      	movs	r2, #52	; 0x34
 800981a:	2100      	movs	r1, #0
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fbcd 	bl	8009fbc <memset>
  if(pcdHandle->Instance==USB)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a24      	ldr	r2, [pc, #144]	; (80098b8 <HAL_PCD_MspInit+0xbc>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d140      	bne.n	80098ae <HAL_PCD_MspInit+0xb2>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800982c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009830:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009832:	2300      	movs	r3, #0
 8009834:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009836:	f107 0310 	add.w	r3, r7, #16
 800983a:	4618      	mov	r0, r3
 800983c:	f7fb f864 	bl	8004908 <HAL_RCCEx_PeriphCLKConfig>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009846:	f7f6 fea5 	bl	8000594 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800984a:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <HAL_PCD_MspInit+0xc0>)
 800984c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_PCD_MspInit+0xc0>)
 8009850:	f043 0301 	orr.w	r3, r3, #1
 8009854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009856:	4b19      	ldr	r3, [pc, #100]	; (80098bc <HAL_PCD_MspInit+0xc0>)
 8009858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009862:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009866:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009868:	2302      	movs	r3, #2
 800986a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800986c:	2300      	movs	r3, #0
 800986e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009870:	2303      	movs	r3, #3
 8009872:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8009874:	230a      	movs	r3, #10
 8009876:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009878:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800987c:	4619      	mov	r1, r3
 800987e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009882:	f7f8 f945 	bl	8001b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009886:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <HAL_PCD_MspInit+0xc0>)
 8009888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800988a:	4a0c      	ldr	r2, [pc, #48]	; (80098bc <HAL_PCD_MspInit+0xc0>)
 800988c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009890:	6593      	str	r3, [r2, #88]	; 0x58
 8009892:	4b0a      	ldr	r3, [pc, #40]	; (80098bc <HAL_PCD_MspInit+0xc0>)
 8009894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009896:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800989a:	60bb      	str	r3, [r7, #8]
 800989c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800989e:	2200      	movs	r2, #0
 80098a0:	2100      	movs	r1, #0
 80098a2:	2043      	movs	r0, #67	; 0x43
 80098a4:	f7f8 f8fd 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80098a8:	2043      	movs	r0, #67	; 0x43
 80098aa:	f7f8 f916 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80098ae:	bf00      	nop
 80098b0:	3758      	adds	r7, #88	; 0x58
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	40006800 	.word	0x40006800
 80098bc:	40021000 	.word	0x40021000

080098c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fe fd20 	bl	800831c <USBD_LL_SetupStage>
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	440b      	add	r3, r1
 8009904:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	4619      	mov	r1, r3
 800990e:	f7fe fd5a 	bl	80083c6 <USBD_LL_DataOutStage>
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	460b      	mov	r3, r1
 8009924:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	4613      	mov	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	440b      	add	r3, r1
 800993a:	3340      	adds	r3, #64	; 0x40
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	4619      	mov	r1, r3
 8009942:	f7fe fda3 	bl	800848c <USBD_LL_DataInStage>
}
 8009946:	bf00      	nop
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800995c:	4618      	mov	r0, r3
 800995e:	f7fe feb7 	bl	80086d0 <USBD_LL_SOF>
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009972:	2301      	movs	r3, #1
 8009974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	2b02      	cmp	r3, #2
 800997c:	d001      	beq.n	8009982 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800997e:	f7f6 fe09 	bl	8000594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009988:	7bfa      	ldrb	r2, [r7, #15]
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fe61 	bl	8008654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fe0d 	bl	80085b8 <USBD_LL_Reset>
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fe5c 	bl	8008674 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c4:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <HAL_PCD_SuspendCallback+0x30>)
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	4a03      	ldr	r2, [pc, #12]	; (80099d8 <HAL_PCD_SuspendCallback+0x30>)
 80099ca:	f043 0306 	orr.w	r3, r3, #6
 80099ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed00 	.word	0xe000ed00

080099dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d007      	beq.n	80099fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099ec:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <HAL_PCD_ResumeCallback+0x34>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	4a07      	ldr	r2, [pc, #28]	; (8009a10 <HAL_PCD_ResumeCallback+0x34>)
 80099f2:	f023 0306 	bic.w	r3, r3, #6
 80099f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80099f8:	f000 fab6 	bl	8009f68 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fe4c 	bl	80086a0 <USBD_LL_Resume>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	e000ed00 	.word	0xe000ed00

08009a14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009a1c:	f7fa f918 	bl	8003c50 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a20:	4a2b      	ldr	r2, [pc, #172]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a29      	ldr	r2, [pc, #164]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009a30:	4b27      	ldr	r3, [pc, #156]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a32:	4a28      	ldr	r2, [pc, #160]	; (8009ad4 <USBD_LL_Init+0xc0>)
 8009a34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a36:	4b26      	ldr	r3, [pc, #152]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a38:	2208      	movs	r2, #8
 8009a3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a3c:	4b24      	ldr	r3, [pc, #144]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a3e:	2202      	movs	r2, #2
 8009a40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a42:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a44:	2202      	movs	r2, #2
 8009a46:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009a48:	4b21      	ldr	r3, [pc, #132]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a4e:	4b20      	ldr	r3, [pc, #128]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a54:	4b1e      	ldr	r3, [pc, #120]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a5a:	4b1d      	ldr	r3, [pc, #116]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a60:	481b      	ldr	r0, [pc, #108]	; (8009ad0 <USBD_LL_Init+0xbc>)
 8009a62:	f7f8 fb05 	bl	8002070 <HAL_PCD_Init>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009a6c:	f7f6 fd92 	bl	8000594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a76:	2318      	movs	r3, #24
 8009a78:	2200      	movs	r2, #0
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	f7fa f815 	bl	8003aaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a86:	2358      	movs	r3, #88	; 0x58
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2180      	movs	r1, #128	; 0x80
 8009a8c:	f7fa f80d 	bl	8003aaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a96:	23c0      	movs	r3, #192	; 0xc0
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2181      	movs	r1, #129	; 0x81
 8009a9c:	f7fa f805 	bl	8003aaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aa6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2101      	movs	r1, #1
 8009aae:	f7f9 fffc 	bl	8003aaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009abc:	2200      	movs	r2, #0
 8009abe:	2182      	movs	r1, #130	; 0x82
 8009ac0:	f7f9 fff3 	bl	8003aaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000f88 	.word	0x20000f88
 8009ad4:	40006800 	.word	0x40006800

08009ad8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7f8 fbd5 	bl	800229e <HAL_PCD_Start>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d816      	bhi.n	8009b2c <USBD_LL_Start+0x54>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <USBD_LL_Start+0x2c>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b15 	.word	0x08009b15
 8009b08:	08009b1b 	.word	0x08009b1b
 8009b0c:	08009b21 	.word	0x08009b21
 8009b10:	08009b27 	.word	0x08009b27
    case HAL_OK :
      usb_status = USBD_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]
    break;
 8009b18:	e00b      	b.n	8009b32 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1e:	e008      	b.n	8009b32 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b20:	2301      	movs	r3, #1
 8009b22:	73fb      	strb	r3, [r7, #15]
    break;
 8009b24:	e005      	b.n	8009b32 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b26:	2303      	movs	r3, #3
 8009b28:	73fb      	strb	r3, [r7, #15]
    break;
 8009b2a:	e002      	b.n	8009b32 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b30:	bf00      	nop
  }
  return usb_status;
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	4608      	mov	r0, r1
 8009b46:	4611      	mov	r1, r2
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	70fb      	strb	r3, [r7, #3]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70bb      	strb	r3, [r7, #2]
 8009b52:	4613      	mov	r3, r2
 8009b54:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b64:	78bb      	ldrb	r3, [r7, #2]
 8009b66:	883a      	ldrh	r2, [r7, #0]
 8009b68:	78f9      	ldrb	r1, [r7, #3]
 8009b6a:	f7f8 fd06 	bl	800257a <HAL_PCD_EP_Open>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d817      	bhi.n	8009ba8 <USBD_LL_OpenEP+0x6c>
 8009b78:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <USBD_LL_OpenEP+0x44>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009b91 	.word	0x08009b91
 8009b84:	08009b97 	.word	0x08009b97
 8009b88:	08009b9d 	.word	0x08009b9d
 8009b8c:	08009ba3 	.word	0x08009ba3
    case HAL_OK :
      usb_status = USBD_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73fb      	strb	r3, [r7, #15]
    break;
 8009b94:	e00b      	b.n	8009bae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b96:	2303      	movs	r3, #3
 8009b98:	73fb      	strb	r3, [r7, #15]
    break;
 8009b9a:	e008      	b.n	8009bae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba0:	e005      	b.n	8009bae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba6:	e002      	b.n	8009bae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	73fb      	strb	r3, [r7, #15]
    break;
 8009bac:	bf00      	nop
  }
  return usb_status;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bd2:	78fa      	ldrb	r2, [r7, #3]
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7f8 fd37 	bl	800264a <HAL_PCD_EP_Close>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d816      	bhi.n	8009c14 <USBD_LL_CloseEP+0x5c>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <USBD_LL_CloseEP+0x34>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009bfd 	.word	0x08009bfd
 8009bf0:	08009c03 	.word	0x08009c03
 8009bf4:	08009c09 	.word	0x08009c09
 8009bf8:	08009c0f 	.word	0x08009c0f
    case HAL_OK :
      usb_status = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009c00:	e00b      	b.n	8009c1a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c02:	2303      	movs	r3, #3
 8009c04:	73fb      	strb	r3, [r7, #15]
    break;
 8009c06:	e008      	b.n	8009c1a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c0c:	e005      	b.n	8009c1a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	73fb      	strb	r3, [r7, #15]
    break;
 8009c12:	e002      	b.n	8009c1a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009c14:	2303      	movs	r3, #3
 8009c16:	73fb      	strb	r3, [r7, #15]
    break;
 8009c18:	bf00      	nop
  }
  return usb_status;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	4611      	mov	r1, r2
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7f8 fde5 	bl	8002812 <HAL_PCD_EP_SetStall>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d816      	bhi.n	8009c80 <USBD_LL_StallEP+0x5c>
 8009c52:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <USBD_LL_StallEP+0x34>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009c69 	.word	0x08009c69
 8009c5c:	08009c6f 	.word	0x08009c6f
 8009c60:	08009c75 	.word	0x08009c75
 8009c64:	08009c7b 	.word	0x08009c7b
    case HAL_OK :
      usb_status = USBD_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c6c:	e00b      	b.n	8009c86 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	73fb      	strb	r3, [r7, #15]
    break;
 8009c72:	e008      	b.n	8009c86 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c74:	2301      	movs	r3, #1
 8009c76:	73fb      	strb	r3, [r7, #15]
    break;
 8009c78:	e005      	b.n	8009c86 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7e:	e002      	b.n	8009c86 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009c80:	2303      	movs	r3, #3
 8009c82:	73fb      	strb	r3, [r7, #15]
    break;
 8009c84:	bf00      	nop
  }
  return usb_status;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f8 fe11 	bl	80028d6 <HAL_PCD_EP_ClrStall>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d816      	bhi.n	8009cec <USBD_LL_ClearStallEP+0x5c>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <USBD_LL_ClearStallEP+0x34>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009cd5 	.word	0x08009cd5
 8009cc8:	08009cdb 	.word	0x08009cdb
 8009ccc:	08009ce1 	.word	0x08009ce1
 8009cd0:	08009ce7 	.word	0x08009ce7
    case HAL_OK :
      usb_status = USBD_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd8:	e00b      	b.n	8009cf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cde:	e008      	b.n	8009cf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce4:	e005      	b.n	8009cf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cea:	e002      	b.n	8009cf2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf0:	bf00      	nop
  }
  return usb_status;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	da0c      	bge.n	8009d32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	00db      	lsls	r3, r3, #3
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3306      	adds	r3, #6
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	e00b      	b.n	8009d4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d32:	78fb      	ldrb	r3, [r7, #3]
 8009d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d38:	68f9      	ldr	r1, [r7, #12]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	440b      	add	r3, r1
 8009d44:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8009d48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
	...

08009d58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f8 fbda 	bl	8002530 <HAL_PCD_SetAddress>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d816      	bhi.n	8009db4 <USBD_LL_SetUSBAddress+0x5c>
 8009d86:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <USBD_LL_SetUSBAddress+0x34>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009da3 	.word	0x08009da3
 8009d94:	08009da9 	.word	0x08009da9
 8009d98:	08009daf 	.word	0x08009daf
    case HAL_OK :
      usb_status = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009da0:	e00b      	b.n	8009dba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009da2:	2303      	movs	r3, #3
 8009da4:	73fb      	strb	r3, [r7, #15]
    break;
 8009da6:	e008      	b.n	8009dba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009da8:	2301      	movs	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dac:	e005      	b.n	8009dba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dae:	2303      	movs	r3, #3
 8009db0:	73fb      	strb	r3, [r7, #15]
    break;
 8009db2:	e002      	b.n	8009dba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	73fb      	strb	r3, [r7, #15]
    break;
 8009db8:	bf00      	nop
  }
  return usb_status;
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	607a      	str	r2, [r7, #4]
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009de2:	7af9      	ldrb	r1, [r7, #11]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	f7f8 fccf 	bl	800278a <HAL_PCD_EP_Transmit>
 8009dec:	4603      	mov	r3, r0
 8009dee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009df0:	7dbb      	ldrb	r3, [r7, #22]
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d816      	bhi.n	8009e24 <USBD_LL_Transmit+0x60>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <USBD_LL_Transmit+0x38>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e0d 	.word	0x08009e0d
 8009e00:	08009e13 	.word	0x08009e13
 8009e04:	08009e19 	.word	0x08009e19
 8009e08:	08009e1f 	.word	0x08009e1f
    case HAL_OK :
      usb_status = USBD_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	75fb      	strb	r3, [r7, #23]
    break;
 8009e10:	e00b      	b.n	8009e2a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e12:	2303      	movs	r3, #3
 8009e14:	75fb      	strb	r3, [r7, #23]
    break;
 8009e16:	e008      	b.n	8009e2a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	75fb      	strb	r3, [r7, #23]
    break;
 8009e1c:	e005      	b.n	8009e2a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	75fb      	strb	r3, [r7, #23]
    break;
 8009e22:	e002      	b.n	8009e2a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009e24:	2303      	movs	r3, #3
 8009e26:	75fb      	strb	r3, [r7, #23]
    break;
 8009e28:	bf00      	nop
  }
  return usb_status;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	607a      	str	r2, [r7, #4]
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	460b      	mov	r3, r1
 8009e42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e52:	7af9      	ldrb	r1, [r7, #11]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	f7f8 fc41 	bl	80026de <HAL_PCD_EP_Receive>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009e60:	7dbb      	ldrb	r3, [r7, #22]
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d816      	bhi.n	8009e94 <USBD_LL_PrepareReceive+0x60>
 8009e66:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <USBD_LL_PrepareReceive+0x38>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e7d 	.word	0x08009e7d
 8009e70:	08009e83 	.word	0x08009e83
 8009e74:	08009e89 	.word	0x08009e89
 8009e78:	08009e8f 	.word	0x08009e8f
    case HAL_OK :
      usb_status = USBD_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	75fb      	strb	r3, [r7, #23]
    break;
 8009e80:	e00b      	b.n	8009e9a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e82:	2303      	movs	r3, #3
 8009e84:	75fb      	strb	r3, [r7, #23]
    break;
 8009e86:	e008      	b.n	8009e9a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
    break;
 8009e8c:	e005      	b.n	8009e9a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	75fb      	strb	r3, [r7, #23]
    break;
 8009e92:	e002      	b.n	8009e9a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	75fb      	strb	r3, [r7, #23]
    break;
 8009e98:	bf00      	nop
  }
  return usb_status;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eb6:	78fa      	ldrb	r2, [r7, #3]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7f8 fc4d 	bl	800275a <HAL_PCD_EP_GetRxCount>
 8009ec0:	4603      	mov	r3, r0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <HAL_PCDEx_LPM_Callback+0x18>
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d013      	beq.n	8009f0a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009ee2:	e023      	b.n	8009f2c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009eec:	f000 f83c 	bl	8009f68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ef0:	4b10      	ldr	r3, [pc, #64]	; (8009f34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	4a0f      	ldr	r2, [pc, #60]	; (8009f34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ef6:	f023 0306 	bic.w	r3, r3, #6
 8009efa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fe fbcc 	bl	80086a0 <USBD_LL_Resume>
    break;
 8009f08:	e010      	b.n	8009f2c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fbaf 	bl	8008674 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d005      	beq.n	8009f2a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f24:	f043 0306 	orr.w	r3, r3, #6
 8009f28:	6113      	str	r3, [r2, #16]
    break;
 8009f2a:	bf00      	nop
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	e000ed00 	.word	0xe000ed00

08009f38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f40:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <USBD_static_malloc+0x18>)
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	20001284 	.word	0x20001284

08009f54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]

}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009f6c:	f7f6 f93f 	bl	80001ee <SystemClock_Config>
}
 8009f70:	bf00      	nop
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <__libc_init_array>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4d0d      	ldr	r5, [pc, #52]	; (8009fac <__libc_init_array+0x38>)
 8009f78:	4c0d      	ldr	r4, [pc, #52]	; (8009fb0 <__libc_init_array+0x3c>)
 8009f7a:	1b64      	subs	r4, r4, r5
 8009f7c:	10a4      	asrs	r4, r4, #2
 8009f7e:	2600      	movs	r6, #0
 8009f80:	42a6      	cmp	r6, r4
 8009f82:	d109      	bne.n	8009f98 <__libc_init_array+0x24>
 8009f84:	4d0b      	ldr	r5, [pc, #44]	; (8009fb4 <__libc_init_array+0x40>)
 8009f86:	4c0c      	ldr	r4, [pc, #48]	; (8009fb8 <__libc_init_array+0x44>)
 8009f88:	f000 f820 	bl	8009fcc <_init>
 8009f8c:	1b64      	subs	r4, r4, r5
 8009f8e:	10a4      	asrs	r4, r4, #2
 8009f90:	2600      	movs	r6, #0
 8009f92:	42a6      	cmp	r6, r4
 8009f94:	d105      	bne.n	8009fa2 <__libc_init_array+0x2e>
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9c:	4798      	blx	r3
 8009f9e:	3601      	adds	r6, #1
 8009fa0:	e7ee      	b.n	8009f80 <__libc_init_array+0xc>
 8009fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa6:	4798      	blx	r3
 8009fa8:	3601      	adds	r6, #1
 8009faa:	e7f2      	b.n	8009f92 <__libc_init_array+0x1e>
 8009fac:	0800a06c 	.word	0x0800a06c
 8009fb0:	0800a06c 	.word	0x0800a06c
 8009fb4:	0800a06c 	.word	0x0800a06c
 8009fb8:	0800a070 	.word	0x0800a070

08009fbc <memset>:
 8009fbc:	4402      	add	r2, r0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d100      	bne.n	8009fc6 <memset+0xa>
 8009fc4:	4770      	bx	lr
 8009fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fca:	e7f9      	b.n	8009fc0 <memset+0x4>

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
